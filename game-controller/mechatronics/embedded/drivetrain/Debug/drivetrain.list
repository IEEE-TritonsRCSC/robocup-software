
drivetrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004780  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800492c  0800492c  0001492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800494c  0800494c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004954  08004954  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004954  08004954  00014954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800495c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000200  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000020c  2000020c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119d4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ac  00000000  00000000  00031a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  000340c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d38  00000000  00000000  00034f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002340e  00000000  00000000  00035c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011476  00000000  00000000  00059046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d65a4  00000000  00000000  0006a4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00140a60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ab0  00000000  00000000  00140ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004914 	.word	0x08004914

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004914 	.word	0x08004914

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_Init 0 */

  /* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */
	hcan1.Instance = CAN1;
 80004f6:	4b23      	ldr	r3, [pc, #140]	; (8000584 <MX_CAN1_Init+0x94>)
 80004f8:	4a23      	ldr	r2, [pc, #140]	; (8000588 <MX_CAN1_Init+0x98>)
 80004fa:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 3;
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <MX_CAN1_Init+0x94>)
 80004fe:	2203      	movs	r2, #3
 8000500:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000502:	4b20      	ldr	r3, [pc, #128]	; (8000584 <MX_CAN1_Init+0x94>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000508:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_CAN1_Init+0x94>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 800050e:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <MX_CAN1_Init+0x94>)
 8000510:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000514:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_CAN1_Init+0x94>)
 8000518:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800051c:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_CAN1_Init+0x94>)
 8000520:	2200      	movs	r2, #0
 8000522:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8000524:	4b17      	ldr	r3, [pc, #92]	; (8000584 <MX_CAN1_Init+0x94>)
 8000526:	2201      	movs	r2, #1
 8000528:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_CAN1_Init+0x94>)
 800052c:	2200      	movs	r2, #0
 800052e:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_CAN1_Init+0x94>)
 8000532:	2200      	movs	r2, #0
 8000534:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_CAN1_Init+0x94>)
 8000538:	2200      	movs	r2, #0
 800053a:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_CAN1_Init+0x94>)
 800053e:	2200      	movs	r2, #0
 8000540:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000542:	4810      	ldr	r0, [pc, #64]	; (8000584 <MX_CAN1_Init+0x94>)
 8000544:	f000 fdfa 	bl	800113c <HAL_CAN_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_CAN1_Init+0x62>
	{
		Error_Handler();
 800054e:	f000 fa69 	bl	8000a24 <Error_Handler>
	}
	 /* USER CODE END CAN1_Init 1 */
	 /* USER CODE BEGIN CAN1_Init 2 */

	 CAN_FilterTypeDef canfilterconfig;
	 canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000552:	2301      	movs	r3, #1
 8000554:	623b      	str	r3, [r7, #32]
	 canfilterconfig.FilterBank = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
	 canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
	 canfilterconfig.FilterIdHigh = 0x0000;
 800055e:	2300      	movs	r3, #0
 8000560:	603b      	str	r3, [r7, #0]
	 canfilterconfig.FilterIdLow = 0x0000;
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
	 canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
	 canfilterconfig.FilterMaskIdLow = 0x0000;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
	 canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
	 canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000572:	2301      	movs	r3, #1
 8000574:	61fb      	str	r3, [r7, #28]
	 canfilterconfig.SlaveStartFilterBank = 14;
 8000576:	230e      	movs	r3, #14
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN CAN1_Init 2 */


  /* USER CODE END CAN1_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	3728      	adds	r7, #40	; 0x28
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028
 8000588:	40006400 	.word	0x40006400

0800058c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <HAL_CAN_MspInit+0xa4>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d13b      	bne.n	8000626 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <HAL_CAN_MspInit+0xa8>)
 80005b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b6:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <HAL_CAN_MspInit+0xa8>)
 80005b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005bc:	6413      	str	r3, [r2, #64]	; 0x40
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <HAL_CAN_MspInit+0xa8>)
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <HAL_CAN_MspInit+0xa8>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a18      	ldr	r2, [pc, #96]	; (8000634 <HAL_CAN_MspInit+0xa8>)
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_CAN_MspInit+0xa8>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005e6:	2303      	movs	r3, #3
 80005e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f2:	2303      	movs	r3, #3
 80005f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005f6:	2309      	movs	r3, #9
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <HAL_CAN_MspInit+0xac>)
 8000602:	f001 fe9d 	bl	8002340 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2013      	movs	r0, #19
 800060c:	f001 faf2 	bl	8001bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000610:	2013      	movs	r0, #19
 8000612:	f001 fb0b 	bl	8001c2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2014      	movs	r0, #20
 800061c:	f001 faea 	bl	8001bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000620:	2014      	movs	r0, #20
 8000622:	f001 fb03 	bl	8001c2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	; 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40006400 	.word	0x40006400
 8000634:	40023800 	.word	0x40023800
 8000638:	40020c00 	.word	0x40020c00

0800063c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_DMA_Init+0x4c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <MX_DMA_Init+0x4c>)
 800064c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_DMA_Init+0x4c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	203a      	movs	r0, #58	; 0x3a
 8000664:	f001 fac6 	bl	8001bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000668:	203a      	movs	r0, #58	; 0x3a
 800066a:	f001 fadf 	bl	8001c2c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	2045      	movs	r0, #69	; 0x45
 8000674:	f001 fabe 	bl	8001bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000678:	2045      	movs	r0, #69	; 0x45
 800067a:	f001 fad7 	bl	8001c2c <HAL_NVIC_EnableIRQ>

}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800

0800068c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	4b50      	ldr	r3, [pc, #320]	; (80007e8 <MX_GPIO_Init+0x15c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a4f      	ldr	r2, [pc, #316]	; (80007e8 <MX_GPIO_Init+0x15c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b4d      	ldr	r3, [pc, #308]	; (80007e8 <MX_GPIO_Init+0x15c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	4b49      	ldr	r3, [pc, #292]	; (80007e8 <MX_GPIO_Init+0x15c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a48      	ldr	r2, [pc, #288]	; (80007e8 <MX_GPIO_Init+0x15c>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b46      	ldr	r3, [pc, #280]	; (80007e8 <MX_GPIO_Init+0x15c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <MX_GPIO_Init+0x15c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a41      	ldr	r2, [pc, #260]	; (80007e8 <MX_GPIO_Init+0x15c>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <MX_GPIO_Init+0x15c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <MX_GPIO_Init+0x15c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a3a      	ldr	r2, [pc, #232]	; (80007e8 <MX_GPIO_Init+0x15c>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <MX_GPIO_Init+0x15c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <MX_GPIO_Init+0x15c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <MX_GPIO_Init+0x15c>)
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <MX_GPIO_Init+0x15c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_GPIO_Init+0x15c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <MX_GPIO_Init+0x15c>)
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_GPIO_Init+0x15c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0320 	and.w	r3, r3, #32
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000750:	4826      	ldr	r0, [pc, #152]	; (80007ec <MX_GPIO_Init+0x160>)
 8000752:	f001 ffa1 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800075c:	4824      	ldr	r0, [pc, #144]	; (80007f0 <MX_GPIO_Init+0x164>)
 800075e:	f001 ff9b 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level*/
   HAL_GPIO_WritePin(Motor_Port, Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	213c      	movs	r1, #60	; 0x3c
 8000766:	4823      	ldr	r0, [pc, #140]	; (80007f4 <MX_GPIO_Init+0x168>)
 8000768:	f001 ff96 	bl	8002698 <HAL_GPIO_WritePin>

   /*Configure GPIO pins : Motor_Power_Switch_01_Pin Motor_Power_Switch_02_Pin Motor_Power_Switch_03_Pin Motor_Power_Switch_04_Pin */
   GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin;
 800076c:	233c      	movs	r3, #60	; 0x3c
 800076e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
   HAL_GPIO_Init(Motor_Port, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_GPIO_Init+0x168>)
 8000784:	f001 fddc 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4816      	ldr	r0, [pc, #88]	; (80007f8 <MX_GPIO_Init+0x16c>)
 800079e:	f001 fdcf 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80007a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	480c      	ldr	r0, [pc, #48]	; (80007ec <MX_GPIO_Init+0x160>)
 80007bc:	f001 fdc0 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80007c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_GPIO_Init+0x164>)
 80007da:	f001 fdb1 	bl	8002340 <HAL_GPIO_Init>

}
 80007de:	bf00      	nop
 80007e0:	3730      	adds	r7, #48	; 0x30
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40021400 	.word	0x40021400
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40021c00 	.word	0x40021c00
 80007f8:	40020c00 	.word	0x40020c00

080007fc <HAL_CAN_TxMailbox0CompleteCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f000 fc2c 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f888 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f7ff ff36 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 8000820:	f7ff ff0c 	bl	800063c <MX_DMA_Init>
  MX_CAN1_Init();
 8000824:	f7ff fe64 	bl	80004f0 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000828:	f000 fb4a 	bl	8000ec0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800082c:	f000 fa1e 	bl	8000c6c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //can_filter_init(&hcan1);
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000830:	4837      	ldr	r0, [pc, #220]	; (8000910 <main+0x100>)
 8000832:	f000 fd7e 	bl	8001332 <HAL_CAN_Start>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <main+0x30>
  {
     Error_Handler ();
 800083c:	f000 f8f2 	bl	8000a24 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY)!= HAL_OK){
 8000840:	2103      	movs	r1, #3
 8000842:	4833      	ldr	r0, [pc, #204]	; (8000910 <main+0x100>)
 8000844:	f000 fec9 	bl	80015da <HAL_CAN_ActivateNotification>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <main+0x42>
	  Error_Handler();
 800084e:	f000 f8e9 	bl	8000a24 <Error_Handler>
  }

  TxHeader.DLC = 8; // length of the message
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <main+0x104>)
 8000854:	2208      	movs	r2, #8
 8000856:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD; //Standard (STD) or Extended (EXT)
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <main+0x104>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA; // specifices if we are sending data or remote frame. idk what that is.
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <main+0x104>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  //TxHeader.ExtId = 0x01; // the message I think???
  TxHeader.StdId = 0x200; // can be 11bit wide, serves as the id for the can bus device
 8000864:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <main+0x104>)
 8000866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086a:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE; // *shrug*, disabled
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <main+0x104>)
 800086e:	2200      	movs	r2, #0
 8000870:	751a      	strb	r2, [r3, #20]

    //TxData[0] = 200;	 // 8 bits?
    //HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);


   TxData[0] = 0b0001111101000000 >> 8;	 // 8 bits?
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <main+0x108>)
 8000874:	221f      	movs	r2, #31
 8000876:	701a      	strb	r2, [r3, #0]
   TxData[1] = 0b0001111101000000;
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <main+0x108>)
 800087a:	2240      	movs	r2, #64	; 0x40
 800087c:	705a      	strb	r2, [r3, #1]
   TxData[2] = 0b0001111101000000 >> 8;
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <main+0x108>)
 8000880:	221f      	movs	r2, #31
 8000882:	709a      	strb	r2, [r3, #2]
   TxData[3] = 0b0001111101000000;
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <main+0x108>)
 8000886:	2240      	movs	r2, #64	; 0x40
 8000888:	70da      	strb	r2, [r3, #3]
   TxData[4] = 0b0001111101000000 >> 8;
 800088a:	4b23      	ldr	r3, [pc, #140]	; (8000918 <main+0x108>)
 800088c:	221f      	movs	r2, #31
 800088e:	711a      	strb	r2, [r3, #4]
   TxData[5] = 0b0001111101000000;
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <main+0x108>)
 8000892:	2240      	movs	r2, #64	; 0x40
 8000894:	715a      	strb	r2, [r3, #5]
   TxData[6] = 0b0001111101000000 >> 8;
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <main+0x108>)
 8000898:	221f      	movs	r2, #31
 800089a:	719a      	strb	r2, [r3, #6]
   TxData[7] = 0b0001111101000000;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <main+0x108>)
 800089e:	2240      	movs	r2, #64	; 0x40
 80008a0:	71da      	strb	r2, [r3, #7]
   HAL_GPIO_TogglePin(Motor_Port, Motor1_Pin);
 80008a2:	2104      	movs	r1, #4
 80008a4:	481d      	ldr	r0, [pc, #116]	; (800091c <main+0x10c>)
 80008a6:	f001 ff10 	bl	80026ca <HAL_GPIO_TogglePin>
   HAL_GPIO_TogglePin(Motor_Port, Motor2_Pin);
 80008aa:	2108      	movs	r1, #8
 80008ac:	481b      	ldr	r0, [pc, #108]	; (800091c <main+0x10c>)
 80008ae:	f001 ff0c 	bl	80026ca <HAL_GPIO_TogglePin>
   HAL_GPIO_TogglePin(Motor_Port, Motor3_Pin);
 80008b2:	2110      	movs	r1, #16
 80008b4:	4819      	ldr	r0, [pc, #100]	; (800091c <main+0x10c>)
 80008b6:	f001 ff08 	bl	80026ca <HAL_GPIO_TogglePin>
   HAL_GPIO_TogglePin(Motor_Port, Motor4_Pin);
 80008ba:	2120      	movs	r1, #32
 80008bc:	4817      	ldr	r0, [pc, #92]	; (800091c <main+0x10c>)
 80008be:	f001 ff04 	bl	80026ca <HAL_GPIO_TogglePin>

   /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0){
 80008c2:	4813      	ldr	r0, [pc, #76]	; (8000910 <main+0x100>)
 80008c4:	f000 fe54 	bl	8001570 <HAL_CAN_GetTxMailboxesFreeLevel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d016      	beq.n	80008fc <main+0xec>
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <main+0x110>)
 80008d0:	4a11      	ldr	r2, [pc, #68]	; (8000918 <main+0x108>)
 80008d2:	4910      	ldr	r1, [pc, #64]	; (8000914 <main+0x104>)
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <main+0x100>)
 80008d6:	f000 fd70 	bl	80013ba <HAL_CAN_AddTxMessage>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d007      	beq.n	80008f0 <main+0xe0>
	  	{
			Error_Handler ();
 80008e0:	f000 f8a0 	bl	8000a24 <Error_Handler>
	  		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e8:	480e      	ldr	r0, [pc, #56]	; (8000924 <main+0x114>)
 80008ea:	f001 feee 	bl	80026ca <HAL_GPIO_TogglePin>
 80008ee:	e00a      	b.n	8000906 <main+0xf6>
	  	}
	  	else{
	  		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <main+0x114>)
 80008f6:	f001 fee8 	bl	80026ca <HAL_GPIO_TogglePin>
 80008fa:	e004      	b.n	8000906 <main+0xf6>
	  	}
	  }
	  else{
	  	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80008fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <main+0x118>)
 8000902:	f001 fee2 	bl	80026ca <HAL_GPIO_TogglePin>
	}
	HAL_Delay(500);
 8000906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090a:	f000 fbf3 	bl	80010f4 <HAL_Delay>
	if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0){
 800090e:	e7d8      	b.n	80008c2 <main+0xb2>
 8000910:	20000028 	.word	0x20000028
 8000914:	20000050 	.word	0x20000050
 8000918:	2000006c 	.word	0x2000006c
 800091c:	40021c00 	.word	0x40021c00
 8000920:	20000068 	.word	0x20000068
 8000924:	40021400 	.word	0x40021400
 8000928:	40021000 	.word	0x40021000

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	2230      	movs	r2, #48	; 0x30
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f003 ffe2 	bl	8004904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <SystemClock_Config+0xcc>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <SystemClock_Config+0xcc>)
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <SystemClock_Config+0xd0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <SystemClock_Config+0xd0>)
 8000976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800099c:	2306      	movs	r3, #6
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009a0:	23a8      	movs	r3, #168	; 0xa8
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fea5 	bl	8002700 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009bc:	f000 f832 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2105      	movs	r1, #5
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 f906 	bl	8002bf0 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009ea:	f000 f81b 	bl	8000a24 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	; 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a12:	f000 fb4f 	bl	80010b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40001000 	.word	0x40001000

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <HAL_InitTick+0xe4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a32      	ldr	r2, [pc, #200]	; (8000b64 <HAL_InitTick+0xe4>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <HAL_InitTick+0xe4>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aac:	f107 0210 	add.w	r2, r7, #16
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fa7a 	bl	8002fb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d103      	bne.n	8000ace <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ac6:	f002 fa4b 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8000aca:	6378      	str	r0, [r7, #52]	; 0x34
 8000acc:	e004      	b.n	8000ad8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ace:	f002 fa47 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ada:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <HAL_InitTick+0xe8>)
 8000adc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae0:	0c9b      	lsrs	r3, r3, #18
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <HAL_InitTick+0xec>)
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <HAL_InitTick+0xf0>)
 8000aea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <HAL_InitTick+0xec>)
 8000aee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000af4:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_InitTick+0xec>)
 8000af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <HAL_InitTick+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <HAL_InitTick+0xec>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_InitTick+0xec>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b0c:	4817      	ldr	r0, [pc, #92]	; (8000b6c <HAL_InitTick+0xec>)
 8000b0e:	f002 fa81 	bl	8003014 <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d11b      	bne.n	8000b58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <HAL_InitTick+0xec>)
 8000b22:	f002 fad1 	bl	80030c8 <HAL_TIM_Base_Start_IT>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d111      	bne.n	8000b58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b34:	2036      	movs	r0, #54	; 0x36
 8000b36:	f001 f879 	bl	8001c2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d808      	bhi.n	8000b52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2036      	movs	r0, #54	; 0x36
 8000b46:	f001 f855 	bl	8001bf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_InitTick+0xf4>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	e002      	b.n	8000b58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3738      	adds	r7, #56	; 0x38
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	431bde83 	.word	0x431bde83
 8000b6c:	20000074 	.word	0x20000074
 8000b70:	40001000 	.word	0x40001000
 8000b74:	20000004 	.word	0x20000004

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <CAN1_TX_IRQHandler+0x10>)
 8000bd6:	f000 fd26 	bl	8001626 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000028 	.word	0x20000028

08000be4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <CAN1_RX0_IRQHandler+0x10>)
 8000bea:	f000 fd1c 	bl	8001626 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000028 	.word	0x20000028

08000bf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <USART1_IRQHandler+0x10>)
 8000bfe:	f002 ff97 	bl	8003b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000164 	.word	0x20000164

08000c0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM6_DAC_IRQHandler+0x10>)
 8000c12:	f002 fb18 	bl	8003246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000074 	.word	0x20000074

08000c20 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <DMA2_Stream2_IRQHandler+0x10>)
 8000c26:	f001 f94f 	bl	8001ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001a8 	.word	0x200001a8

08000c34 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1_ch2_ch3);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <DMA2_Stream6_IRQHandler+0x10>)
 8000c3a:	f001 f945 	bl	8001ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000104 	.word	0x20000104

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1_ch2_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c88:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000c8a:	4a37      	ldr	r2, [pc, #220]	; (8000d68 <MX_TIM1_Init+0xfc>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000c8e:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000c90:	2209      	movs	r2, #9
 8000c92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000c9a:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000c9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000cb4:	482b      	ldr	r0, [pc, #172]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000cb6:	f002 fa77 	bl	80031a8 <HAL_TIM_IC_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f7ff feb0 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4824      	ldr	r0, [pc, #144]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000cd4:	f002 fe4e 	bl	8003974 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cde:	f7ff fea1 	bl	8000a24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481a      	ldr	r0, [pc, #104]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000cfa:	f002 fbac 	bl	8003456 <HAL_TIM_IC_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000d04:	f7ff fe8e 	bl	8000a24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d08:	230a      	movs	r3, #10
 8000d0a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	2204      	movs	r2, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4813      	ldr	r0, [pc, #76]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000d18:	f002 fb9d 	bl	8003456 <HAL_TIM_IC_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000d22:	f7ff fe7f 	bl	8000a24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000d32:	f002 fb90 	bl	8003456 <HAL_TIM_IC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d3c:	f7ff fe72 	bl	8000a24 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d40:	2302      	movs	r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	220c      	movs	r2, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <MX_TIM1_Init+0xf8>)
 8000d4c:	f002 fb83 	bl	8003456 <HAL_TIM_IC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000d56:	f7ff fe65 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000bc 	.word	0x200000bc
 8000d68:	40010000 	.word	0x40010000

08000d6c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a47      	ldr	r2, [pc, #284]	; (8000ea8 <HAL_TIM_IC_MspInit+0x13c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	f040 8088 	bne.w	8000ea0 <HAL_TIM_IC_MspInit+0x134>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	4b45      	ldr	r3, [pc, #276]	; (8000eac <HAL_TIM_IC_MspInit+0x140>)
 8000d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d98:	4a44      	ldr	r2, [pc, #272]	; (8000eac <HAL_TIM_IC_MspInit+0x140>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000da0:	4b42      	ldr	r3, [pc, #264]	; (8000eac <HAL_TIM_IC_MspInit+0x140>)
 8000da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <HAL_TIM_IC_MspInit+0x140>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a3d      	ldr	r2, [pc, #244]	; (8000eac <HAL_TIM_IC_MspInit+0x140>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <HAL_TIM_IC_MspInit+0x140>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	4b37      	ldr	r3, [pc, #220]	; (8000eac <HAL_TIM_IC_MspInit+0x140>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a36      	ldr	r2, [pc, #216]	; (8000eac <HAL_TIM_IC_MspInit+0x140>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b34      	ldr	r3, [pc, #208]	; (8000eac <HAL_TIM_IC_MspInit+0x140>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <HAL_TIM_IC_MspInit+0x144>)
 8000e02:	f001 fa9d 	bl	8002340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4824      	ldr	r0, [pc, #144]	; (8000eb4 <HAL_TIM_IC_MspInit+0x148>)
 8000e24:	f001 fa8c 	bl	8002340 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1_CH2_CH3 Init */
    hdma_tim1_ch1_ch2_ch3.Instance = DMA2_Stream6;
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e2a:	4a24      	ldr	r2, [pc, #144]	; (8000ebc <HAL_TIM_IC_MspInit+0x150>)
 8000e2c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e46:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e4e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e56:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1_ch2_ch3.Init.Mode = DMA_CIRCULAR;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e5e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1_ch2_ch3) != HAL_OK)
 8000e6c:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e6e:	f000 feeb 	bl	8001c48 <HAL_DMA_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_TIM_IC_MspInit+0x110>
    {
      Error_Handler();
 8000e78:	f7ff fdd4 	bl	8000a24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1_ch2_ch3);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
 8000e82:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch1_ch2_ch3);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_icHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch1_ch2_ch3);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_TIM_IC_MspInit+0x14c>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40010000 	.word	0x40010000
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	20000104 	.word	0x20000104
 8000ebc:	400264a0 	.word	0x400264a0

08000ec0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_USART1_UART_Init+0x50>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ecc:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <MX_USART1_UART_Init+0x54>)
 8000ece:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_USART1_UART_Init+0x4c>)
 8000ef8:	f002 fdcc 	bl	8003a94 <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f02:	f7ff fd8f 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000164 	.word	0x20000164
 8000f10:	40011000 	.word	0x40011000
 8000f14:	000186a0 	.word	0x000186a0

08000f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a34      	ldr	r2, [pc, #208]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d161      	bne.n	8000ffe <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b33      	ldr	r3, [pc, #204]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a32      	ldr	r2, [pc, #200]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b30      	ldr	r3, [pc, #192]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a2b      	ldr	r2, [pc, #172]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000f72:	23c0      	movs	r3, #192	; 0xc0
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f82:	2307      	movs	r3, #7
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4820      	ldr	r0, [pc, #128]	; (8001010 <HAL_UART_MspInit+0xf8>)
 8000f8e:	f001 f9d7 	bl	8002340 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000f94:	4a20      	ldr	r2, [pc, #128]	; (8001018 <HAL_UART_MspInit+0x100>)
 8000f96:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f9e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fd4:	f000 fe38 	bl	8001c48 <HAL_DMA_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000fde:	f7ff fd21 	bl	8000a24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2025      	movs	r0, #37	; 0x25
 8000ff4:	f000 fdfe 	bl	8001bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ff8:	2025      	movs	r0, #37	; 0x25
 8000ffa:	f000 fe17 	bl	8001c2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40011000 	.word	0x40011000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400
 8001014:	200001a8 	.word	0x200001a8
 8001018:	40026440 	.word	0x40026440

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001046:	f7ff fdff 	bl	8000c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f003 fc37 	bl	80048bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fbdf 	bl	8000810 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001060:	0800495c 	.word	0x0800495c
  ldr r2, =_sbss
 8001064:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001068:	2000020c 	.word	0x2000020c

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 fda0 	bl	8001bde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fcee 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fcc4 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000208 	.word	0x20000208

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000208 	.word	0x20000208

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008

0800113c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0ed      	b.n	800132a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fa16 	bl	800058c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001170:	f7ff ffb4 	bl	80010dc <HAL_GetTick>
 8001174:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001176:	e012      	b.n	800119e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001178:	f7ff ffb0 	bl	80010dc <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b0a      	cmp	r3, #10
 8001184:	d90b      	bls.n	800119e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2205      	movs	r2, #5
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0c5      	b.n	800132a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0e5      	beq.n	8001178 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0202 	bic.w	r2, r2, #2
 80011ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011bc:	f7ff ff8e 	bl	80010dc <HAL_GetTick>
 80011c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011c2:	e012      	b.n	80011ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c4:	f7ff ff8a 	bl	80010dc <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b0a      	cmp	r3, #10
 80011d0:	d90b      	bls.n	80011ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2205      	movs	r2, #5
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e09f      	b.n	800132a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e5      	bne.n	80011c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7e1b      	ldrb	r3, [r3, #24]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d108      	bne.n	8001212 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e007      	b.n	8001222 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7e5b      	ldrb	r3, [r3, #25]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d108      	bne.n	800123c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	e007      	b.n	800124c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800124a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7e9b      	ldrb	r3, [r3, #26]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d108      	bne.n	8001266 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0220 	orr.w	r2, r2, #32
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	e007      	b.n	8001276 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0220 	bic.w	r2, r2, #32
 8001274:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7edb      	ldrb	r3, [r3, #27]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d108      	bne.n	8001290 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0210 	bic.w	r2, r2, #16
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	e007      	b.n	80012a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0210 	orr.w	r2, r2, #16
 800129e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7f1b      	ldrb	r3, [r3, #28]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d108      	bne.n	80012ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0208 	orr.w	r2, r2, #8
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e007      	b.n	80012ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0208 	bic.w	r2, r2, #8
 80012c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7f5b      	ldrb	r3, [r3, #29]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d108      	bne.n	80012e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 0204 	orr.w	r2, r2, #4
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e007      	b.n	80012f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0204 	bic.w	r2, r2, #4
 80012f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	ea42 0103 	orr.w	r1, r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	1e5a      	subs	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b084      	sub	sp, #16
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d12e      	bne.n	80013a4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2202      	movs	r2, #2
 800134a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800135e:	f7ff febd 	bl	80010dc <HAL_GetTick>
 8001362:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001364:	e012      	b.n	800138c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001366:	f7ff feb9 	bl	80010dc <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b0a      	cmp	r3, #10
 8001372:	d90b      	bls.n	800138c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2205      	movs	r2, #5
 8001384:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e012      	b.n	80013b2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1e5      	bne.n	8001366 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e006      	b.n	80013b2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
  }
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b089      	sub	sp, #36	; 0x24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013d8:	7ffb      	ldrb	r3, [r7, #31]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d003      	beq.n	80013e6 <HAL_CAN_AddTxMessage+0x2c>
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	f040 80b8 	bne.w	8001556 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10a      	bne.n	8001406 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d105      	bne.n	8001406 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a0 	beq.w	8001546 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	0e1b      	lsrs	r3, r3, #24
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d907      	bls.n	8001426 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e09e      	b.n	8001564 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001426:	2201      	movs	r2, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10d      	bne.n	8001454 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001442:	68f9      	ldr	r1, [r7, #12]
 8001444:	6809      	ldr	r1, [r1, #0]
 8001446:	431a      	orrs	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3318      	adds	r3, #24
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	440b      	add	r3, r1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e00f      	b.n	8001474 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800145e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001464:	68f9      	ldr	r1, [r7, #12]
 8001466:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001468:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3318      	adds	r3, #24
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	440b      	add	r3, r1
 8001472:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6819      	ldr	r1, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3318      	adds	r3, #24
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	440b      	add	r3, r1
 8001484:	3304      	adds	r3, #4
 8001486:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	7d1b      	ldrb	r3, [r3, #20]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d111      	bne.n	80014b4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3318      	adds	r3, #24
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	3304      	adds	r3, #4
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	6811      	ldr	r1, [r2, #0]
 80014a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3318      	adds	r3, #24
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	440b      	add	r3, r1
 80014b0:	3304      	adds	r3, #4
 80014b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3307      	adds	r3, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	061a      	lsls	r2, r3, #24
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3306      	adds	r3, #6
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	041b      	lsls	r3, r3, #16
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3305      	adds	r3, #5
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	4313      	orrs	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	3204      	adds	r2, #4
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	4610      	mov	r0, r2
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	6811      	ldr	r1, [r2, #0]
 80014dc:	ea43 0200 	orr.w	r2, r3, r0
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	440b      	add	r3, r1
 80014e6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80014ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3303      	adds	r3, #3
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	061a      	lsls	r2, r3, #24
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3302      	adds	r3, #2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	041b      	lsls	r3, r3, #16
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3301      	adds	r3, #1
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	4313      	orrs	r3, r2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	4610      	mov	r0, r2
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	6811      	ldr	r1, [r2, #0]
 8001512:	ea43 0200 	orr.w	r2, r3, r0
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	440b      	add	r3, r1
 800151c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001520:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3318      	adds	r3, #24
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	6811      	ldr	r1, [r2, #0]
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3318      	adds	r3, #24
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	440b      	add	r3, r1
 8001540:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e00e      	b.n	8001564 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e006      	b.n	8001564 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
  }
}
 8001564:	4618      	mov	r0, r3
 8001566:	3724      	adds	r7, #36	; 0x24
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001582:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d002      	beq.n	8001590 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d11d      	bne.n	80015cc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3301      	adds	r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3301      	adds	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80015cc:	68fb      	ldr	r3, [r7, #12]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d002      	beq.n	80015f8 <HAL_CAN_ActivateNotification+0x1e>
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d109      	bne.n	800160c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6959      	ldr	r1, [r3, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	e006      	b.n	800161a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
  }
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b08a      	sub	sp, #40	; 0x28
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d07c      	beq.n	8001766 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d023      	beq.n	80016be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2201      	movs	r2, #1
 800167c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff f8b7 	bl	80007fc <HAL_CAN_TxMailbox0CompleteCallback>
 800168e:	e016      	b.n	80016be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
 80016a2:	e00c      	b.n	80016be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
 80016b6:	e002      	b.n	80016be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f97f 	bl	80019bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d024      	beq.n	8001712 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f959 	bl	8001994 <HAL_CAN_TxMailbox1CompleteCallback>
 80016e2:	e016      	b.n	8001712 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d004      	beq.n	80016f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
 80016f6:	e00c      	b.n	8001712 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d004      	beq.n	800170c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
 800170a:	e002      	b.n	8001712 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f95f 	bl	80019d0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d024      	beq.n	8001766 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001724:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f939 	bl	80019a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001736:	e016      	b.n	8001766 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d004      	beq.n	800174c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
 800174a:	e00c      	b.n	8001766 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
 800175e:	e002      	b.n	8001766 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f93f 	bl	80019e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00c      	beq.n	800178a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001780:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2210      	movs	r2, #16
 8001788:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00b      	beq.n	80017ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2208      	movs	r2, #8
 80017a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f930 	bl	8001a0c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f917 	bl	80019f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00c      	beq.n	80017ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2210      	movs	r2, #16
 80017ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	f003 0320 	and.w	r3, r3, #32
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00b      	beq.n	8001810 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2208      	movs	r2, #8
 8001808:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f912 	bl	8001a34 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f8f9 	bl	8001a20 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2210      	movs	r2, #16
 8001848:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8fc 	bl	8001a48 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2208      	movs	r2, #8
 800186a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f8f5 	bl	8001a5c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d07b      	beq.n	8001974 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d072      	beq.n	800196c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d043      	beq.n	800196c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d03e      	beq.n	800196c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018f4:	2b60      	cmp	r3, #96	; 0x60
 80018f6:	d02b      	beq.n	8001950 <HAL_CAN_IRQHandler+0x32a>
 80018f8:	2b60      	cmp	r3, #96	; 0x60
 80018fa:	d82e      	bhi.n	800195a <HAL_CAN_IRQHandler+0x334>
 80018fc:	2b50      	cmp	r3, #80	; 0x50
 80018fe:	d022      	beq.n	8001946 <HAL_CAN_IRQHandler+0x320>
 8001900:	2b50      	cmp	r3, #80	; 0x50
 8001902:	d82a      	bhi.n	800195a <HAL_CAN_IRQHandler+0x334>
 8001904:	2b40      	cmp	r3, #64	; 0x40
 8001906:	d019      	beq.n	800193c <HAL_CAN_IRQHandler+0x316>
 8001908:	2b40      	cmp	r3, #64	; 0x40
 800190a:	d826      	bhi.n	800195a <HAL_CAN_IRQHandler+0x334>
 800190c:	2b30      	cmp	r3, #48	; 0x30
 800190e:	d010      	beq.n	8001932 <HAL_CAN_IRQHandler+0x30c>
 8001910:	2b30      	cmp	r3, #48	; 0x30
 8001912:	d822      	bhi.n	800195a <HAL_CAN_IRQHandler+0x334>
 8001914:	2b10      	cmp	r3, #16
 8001916:	d002      	beq.n	800191e <HAL_CAN_IRQHandler+0x2f8>
 8001918:	2b20      	cmp	r3, #32
 800191a:	d005      	beq.n	8001928 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800191c:	e01d      	b.n	800195a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001926:	e019      	b.n	800195c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001930:	e014      	b.n	800195c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	f043 0320 	orr.w	r3, r3, #32
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800193a:	e00f      	b.n	800195c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001944:	e00a      	b.n	800195c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800194e:	e005      	b.n	800195c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001958:	e000      	b.n	800195c <HAL_CAN_IRQHandler+0x336>
            break;
 800195a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699a      	ldr	r2, [r3, #24]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800196a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2204      	movs	r2, #4
 8001972:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f872 	bl	8001a70 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0307 	and.w	r3, r3, #7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db0b      	blt.n	8001b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	4907      	ldr	r1, [pc, #28]	; (8001b20 <__NVIC_EnableIRQ+0x38>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	2001      	movs	r0, #1
 8001b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000e100 	.word	0xe000e100

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	db0a      	blt.n	8001b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	490c      	ldr	r1, [pc, #48]	; (8001b70 <__NVIC_SetPriority+0x4c>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	0112      	lsls	r2, r2, #4
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	440b      	add	r3, r1
 8001b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b4c:	e00a      	b.n	8001b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4908      	ldr	r1, [pc, #32]	; (8001b74 <__NVIC_SetPriority+0x50>)
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	3b04      	subs	r3, #4
 8001b5c:	0112      	lsls	r2, r2, #4
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	761a      	strb	r2, [r3, #24]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000e100 	.word	0xe000e100
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f1c3 0307 	rsb	r3, r3, #7
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	bf28      	it	cs
 8001b96:	2304      	movcs	r3, #4
 8001b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d902      	bls.n	8001ba8 <NVIC_EncodePriority+0x30>
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3b03      	subs	r3, #3
 8001ba6:	e000      	b.n	8001baa <NVIC_EncodePriority+0x32>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	401a      	ands	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	4313      	orrs	r3, r2
         );
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3724      	adds	r7, #36	; 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ff4c 	bl	8001a84 <__NVIC_SetPriorityGrouping>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c06:	f7ff ff61 	bl	8001acc <__NVIC_GetPriorityGrouping>
 8001c0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	6978      	ldr	r0, [r7, #20]
 8001c12:	f7ff ffb1 	bl	8001b78 <NVIC_EncodePriority>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff80 	bl	8001b24 <__NVIC_SetPriority>
}
 8001c24:	bf00      	nop
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff54 	bl	8001ae8 <__NVIC_EnableIRQ>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff fa42 	bl	80010dc <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e099      	b.n	8001d98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c84:	e00f      	b.n	8001ca6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c86:	f7ff fa29 	bl	80010dc <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b05      	cmp	r3, #5
 8001c92:	d908      	bls.n	8001ca6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2220      	movs	r2, #32
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e078      	b.n	8001d98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e8      	bne.n	8001c86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <HAL_DMA_Init+0x158>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d107      	bne.n	8001d10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f023 0307 	bic.w	r3, r3, #7
 8001d26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d117      	bne.n	8001d6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00e      	beq.n	8001d6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fa7b 	bl	8002248 <DMA_CheckFifoParam>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2240      	movs	r2, #64	; 0x40
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d66:	2301      	movs	r3, #1
 8001d68:	e016      	b.n	8001d98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fa32 	bl	80021dc <DMA_CalcBaseAndBitshift>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	223f      	movs	r2, #63	; 0x3f
 8001d82:	409a      	lsls	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	f010803f 	.word	0xf010803f

08001da4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001db2:	f7ff f993 	bl	80010dc <HAL_GetTick>
 8001db6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d008      	beq.n	8001dd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e052      	b.n	8001e7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0216 	bic.w	r2, r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <HAL_DMA_Abort+0x62>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0208 	bic.w	r2, r2, #8
 8001e14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e26:	e013      	b.n	8001e50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e28:	f7ff f958 	bl	80010dc <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d90c      	bls.n	8001e50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e015      	b.n	8001e7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1e4      	bne.n	8001e28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	223f      	movs	r2, #63	; 0x3f
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d004      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00c      	b.n	8001ebc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ed4:	4b8e      	ldr	r3, [pc, #568]	; (8002110 <HAL_DMA_IRQHandler+0x248>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a8e      	ldr	r2, [pc, #568]	; (8002114 <HAL_DMA_IRQHandler+0x24c>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0a9b      	lsrs	r3, r3, #10
 8001ee0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01a      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0204 	bic.w	r2, r2, #4
 8001f1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2208      	movs	r2, #8
 8001f22:	409a      	lsls	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	2201      	movs	r2, #1
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d012      	beq.n	8001f6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	2201      	movs	r2, #1
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	f043 0202 	orr.w	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	2204      	movs	r2, #4
 8001f70:	409a      	lsls	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f043 0204 	orr.w	r2, r3, #4
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d043      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03c      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d018      	beq.n	800200a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d108      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d024      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
 8001ff6:	e01f      	b.n	8002038 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
 8002008:	e016      	b.n	8002038 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0208 	bic.w	r2, r2, #8
 8002026:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	2220      	movs	r2, #32
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 808f 	beq.w	8002168 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8087 	beq.w	8002168 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	2220      	movs	r2, #32
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b05      	cmp	r3, #5
 8002070:	d136      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0216 	bic.w	r2, r2, #22
 8002080:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002090:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_DMA_IRQHandler+0x1da>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0208 	bic.w	r2, r2, #8
 80020b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	223f      	movs	r2, #63	; 0x3f
 80020b8:	409a      	lsls	r2, r3
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d07e      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
        }
        return;
 80020de:	e079      	b.n	80021d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01d      	beq.n	800212a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10d      	bne.n	8002118 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	2b00      	cmp	r3, #0
 8002102:	d031      	beq.n	8002168 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e02c      	b.n	8002168 <HAL_DMA_IRQHandler+0x2a0>
 800210e:	bf00      	nop
 8002110:	20000000 	.word	0x20000000
 8002114:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d023      	beq.n	8002168 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
 8002128:	e01e      	b.n	8002168 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10f      	bne.n	8002158 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0210 	bic.w	r2, r2, #16
 8002146:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	2b00      	cmp	r3, #0
 800216e:	d032      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d022      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2205      	movs	r2, #5
 8002180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	3301      	adds	r3, #1
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	429a      	cmp	r2, r3
 800219e:	d307      	bcc.n	80021b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f2      	bne.n	8002194 <HAL_DMA_IRQHandler+0x2cc>
 80021ae:	e000      	b.n	80021b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
 80021d2:	e000      	b.n	80021d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021d4:	bf00      	nop
    }
  }
}
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	3b10      	subs	r3, #16
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <DMA_CalcBaseAndBitshift+0x64>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021f6:	4a13      	ldr	r2, [pc, #76]	; (8002244 <DMA_CalcBaseAndBitshift+0x68>)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d909      	bls.n	800221e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	1d1a      	adds	r2, r3, #4
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	659a      	str	r2, [r3, #88]	; 0x58
 800221c:	e007      	b.n	800222e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	aaaaaaab 	.word	0xaaaaaaab
 8002244:	08004944 	.word	0x08004944

08002248 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d11f      	bne.n	80022a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d856      	bhi.n	8002316 <DMA_CheckFifoParam+0xce>
 8002268:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <DMA_CheckFifoParam+0x28>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	08002281 	.word	0x08002281
 8002274:	08002293 	.word	0x08002293
 8002278:	08002281 	.word	0x08002281
 800227c:	08002317 	.word	0x08002317
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d046      	beq.n	800231a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002290:	e043      	b.n	800231a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800229a:	d140      	bne.n	800231e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a0:	e03d      	b.n	800231e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022aa:	d121      	bne.n	80022f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d837      	bhi.n	8002322 <DMA_CheckFifoParam+0xda>
 80022b2:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <DMA_CheckFifoParam+0x70>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	080022cf 	.word	0x080022cf
 80022c0:	080022c9 	.word	0x080022c9
 80022c4:	080022e1 	.word	0x080022e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      break;
 80022cc:	e030      	b.n	8002330 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d025      	beq.n	8002326 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022de:	e022      	b.n	8002326 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022e8:	d11f      	bne.n	800232a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022ee:	e01c      	b.n	800232a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d903      	bls.n	80022fe <DMA_CheckFifoParam+0xb6>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d003      	beq.n	8002304 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022fc:	e018      	b.n	8002330 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
      break;
 8002302:	e015      	b.n	8002330 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00e      	beq.n	800232e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
      break;
 8002314:	e00b      	b.n	800232e <DMA_CheckFifoParam+0xe6>
      break;
 8002316:	bf00      	nop
 8002318:	e00a      	b.n	8002330 <DMA_CheckFifoParam+0xe8>
      break;
 800231a:	bf00      	nop
 800231c:	e008      	b.n	8002330 <DMA_CheckFifoParam+0xe8>
      break;
 800231e:	bf00      	nop
 8002320:	e006      	b.n	8002330 <DMA_CheckFifoParam+0xe8>
      break;
 8002322:	bf00      	nop
 8002324:	e004      	b.n	8002330 <DMA_CheckFifoParam+0xe8>
      break;
 8002326:	bf00      	nop
 8002328:	e002      	b.n	8002330 <DMA_CheckFifoParam+0xe8>
      break;   
 800232a:	bf00      	nop
 800232c:	e000      	b.n	8002330 <DMA_CheckFifoParam+0xe8>
      break;
 800232e:	bf00      	nop
    }
  } 
  
  return status; 
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	e177      	b.n	800264c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	429a      	cmp	r2, r3
 8002376:	f040 8166 	bne.w	8002646 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d005      	beq.n	8002392 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238e:	2b02      	cmp	r3, #2
 8002390:	d130      	bne.n	80023f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 0201 	and.w	r2, r3, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d017      	beq.n	8002430 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d123      	bne.n	8002484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	08da      	lsrs	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3208      	adds	r2, #8
 8002444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	08da      	lsrs	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3208      	adds	r2, #8
 800247e:	69b9      	ldr	r1, [r7, #24]
 8002480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0203 	and.w	r2, r3, #3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80c0 	beq.w	8002646 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_GPIO_Init+0x324>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a65      	ldr	r2, [pc, #404]	; (8002664 <HAL_GPIO_Init+0x324>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_GPIO_Init+0x324>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e2:	4a61      	ldr	r2, [pc, #388]	; (8002668 <HAL_GPIO_Init+0x328>)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	220f      	movs	r2, #15
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_GPIO_Init+0x32c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d037      	beq.n	800257e <HAL_GPIO_Init+0x23e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a57      	ldr	r2, [pc, #348]	; (8002670 <HAL_GPIO_Init+0x330>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d031      	beq.n	800257a <HAL_GPIO_Init+0x23a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a56      	ldr	r2, [pc, #344]	; (8002674 <HAL_GPIO_Init+0x334>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d02b      	beq.n	8002576 <HAL_GPIO_Init+0x236>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a55      	ldr	r2, [pc, #340]	; (8002678 <HAL_GPIO_Init+0x338>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d025      	beq.n	8002572 <HAL_GPIO_Init+0x232>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a54      	ldr	r2, [pc, #336]	; (800267c <HAL_GPIO_Init+0x33c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01f      	beq.n	800256e <HAL_GPIO_Init+0x22e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a53      	ldr	r2, [pc, #332]	; (8002680 <HAL_GPIO_Init+0x340>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d019      	beq.n	800256a <HAL_GPIO_Init+0x22a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_GPIO_Init+0x344>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x226>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a51      	ldr	r2, [pc, #324]	; (8002688 <HAL_GPIO_Init+0x348>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x222>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a50      	ldr	r2, [pc, #320]	; (800268c <HAL_GPIO_Init+0x34c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x21e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4f      	ldr	r2, [pc, #316]	; (8002690 <HAL_GPIO_Init+0x350>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x21a>
 8002556:	2309      	movs	r3, #9
 8002558:	e012      	b.n	8002580 <HAL_GPIO_Init+0x240>
 800255a:	230a      	movs	r3, #10
 800255c:	e010      	b.n	8002580 <HAL_GPIO_Init+0x240>
 800255e:	2308      	movs	r3, #8
 8002560:	e00e      	b.n	8002580 <HAL_GPIO_Init+0x240>
 8002562:	2307      	movs	r3, #7
 8002564:	e00c      	b.n	8002580 <HAL_GPIO_Init+0x240>
 8002566:	2306      	movs	r3, #6
 8002568:	e00a      	b.n	8002580 <HAL_GPIO_Init+0x240>
 800256a:	2305      	movs	r3, #5
 800256c:	e008      	b.n	8002580 <HAL_GPIO_Init+0x240>
 800256e:	2304      	movs	r3, #4
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x240>
 8002572:	2303      	movs	r3, #3
 8002574:	e004      	b.n	8002580 <HAL_GPIO_Init+0x240>
 8002576:	2302      	movs	r3, #2
 8002578:	e002      	b.n	8002580 <HAL_GPIO_Init+0x240>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x240>
 800257e:	2300      	movs	r3, #0
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	f002 0203 	and.w	r2, r2, #3
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	4093      	lsls	r3, r2
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002590:	4935      	ldr	r1, [pc, #212]	; (8002668 <HAL_GPIO_Init+0x328>)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3302      	adds	r3, #2
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800259e:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <HAL_GPIO_Init+0x354>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025c2:	4a34      	ldr	r2, [pc, #208]	; (8002694 <HAL_GPIO_Init+0x354>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <HAL_GPIO_Init+0x354>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025ec:	4a29      	ldr	r2, [pc, #164]	; (8002694 <HAL_GPIO_Init+0x354>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_GPIO_Init+0x354>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002616:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <HAL_GPIO_Init+0x354>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_GPIO_Init+0x354>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002640:	4a14      	ldr	r2, [pc, #80]	; (8002694 <HAL_GPIO_Init+0x354>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3301      	adds	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b0f      	cmp	r3, #15
 8002650:	f67f ae84 	bls.w	800235c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	40013800 	.word	0x40013800
 800266c:	40020000 	.word	0x40020000
 8002670:	40020400 	.word	0x40020400
 8002674:	40020800 	.word	0x40020800
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40021000 	.word	0x40021000
 8002680:	40021400 	.word	0x40021400
 8002684:	40021800 	.word	0x40021800
 8002688:	40021c00 	.word	0x40021c00
 800268c:	40022000 	.word	0x40022000
 8002690:	40022400 	.word	0x40022400
 8002694:	40013c00 	.word	0x40013c00

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b4:	e003      	b.n	80026be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	041a      	lsls	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	619a      	str	r2, [r3, #24]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026dc:	887a      	ldrh	r2, [r7, #2]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	041a      	lsls	r2, r3, #16
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	400b      	ands	r3, r1
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	619a      	str	r2, [r3, #24]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e267      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d075      	beq.n	800280a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800271e:	4b88      	ldr	r3, [pc, #544]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b04      	cmp	r3, #4
 8002728:	d00c      	beq.n	8002744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272a:	4b85      	ldr	r3, [pc, #532]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002732:	2b08      	cmp	r3, #8
 8002734:	d112      	bne.n	800275c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002736:	4b82      	ldr	r3, [pc, #520]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002742:	d10b      	bne.n	800275c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	4b7e      	ldr	r3, [pc, #504]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d05b      	beq.n	8002808 <HAL_RCC_OscConfig+0x108>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d157      	bne.n	8002808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e242      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002764:	d106      	bne.n	8002774 <HAL_RCC_OscConfig+0x74>
 8002766:	4b76      	ldr	r3, [pc, #472]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a75      	ldr	r2, [pc, #468]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e01d      	b.n	80027b0 <HAL_RCC_OscConfig+0xb0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x98>
 800277e:	4b70      	ldr	r3, [pc, #448]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6f      	ldr	r2, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6c      	ldr	r2, [pc, #432]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	e00b      	b.n	80027b0 <HAL_RCC_OscConfig+0xb0>
 8002798:	4b69      	ldr	r3, [pc, #420]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a68      	ldr	r2, [pc, #416]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	4b66      	ldr	r3, [pc, #408]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a65      	ldr	r2, [pc, #404]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80027aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fc90 	bl	80010dc <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fe fc8c 	bl	80010dc <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e207      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b5b      	ldr	r3, [pc, #364]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0xc0>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fc7c 	bl	80010dc <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fc78 	bl	80010dc <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1f3      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	4b51      	ldr	r3, [pc, #324]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0xe8>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d063      	beq.n	80028de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002816:	4b4a      	ldr	r3, [pc, #296]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282a:	2b08      	cmp	r3, #8
 800282c:	d11c      	bne.n	8002868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282e:	4b44      	ldr	r3, [pc, #272]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_RCC_OscConfig+0x152>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e1c7      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4937      	ldr	r1, [pc, #220]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	e03a      	b.n	80028de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002870:	4b34      	ldr	r3, [pc, #208]	; (8002944 <HAL_RCC_OscConfig+0x244>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fc31 	bl	80010dc <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fc2d 	bl	80010dc <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e1a8      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b28      	ldr	r3, [pc, #160]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4925      	ldr	r1, [pc, #148]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	e015      	b.n	80028de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCC_OscConfig+0x244>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fc10 	bl	80010dc <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c0:	f7fe fc0c 	bl	80010dc <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e187      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d036      	beq.n	8002958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d016      	beq.n	8002920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_RCC_OscConfig+0x248>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fbf0 	bl	80010dc <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002900:	f7fe fbec 	bl	80010dc <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e167      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_OscConfig+0x240>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x200>
 800291e:	e01b      	b.n	8002958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_OscConfig+0x248>)
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7fe fbd9 	bl	80010dc <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	e00e      	b.n	800294c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292e:	f7fe fbd5 	bl	80010dc <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d907      	bls.n	800294c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e150      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
 8002940:	40023800 	.word	0x40023800
 8002944:	42470000 	.word	0x42470000
 8002948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b88      	ldr	r3, [pc, #544]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 800294e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ea      	bne.n	800292e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8097 	beq.w	8002a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b81      	ldr	r3, [pc, #516]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b7d      	ldr	r3, [pc, #500]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a7c      	ldr	r2, [pc, #496]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b7a      	ldr	r3, [pc, #488]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002996:	4b77      	ldr	r3, [pc, #476]	; (8002b74 <HAL_RCC_OscConfig+0x474>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d118      	bne.n	80029d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a2:	4b74      	ldr	r3, [pc, #464]	; (8002b74 <HAL_RCC_OscConfig+0x474>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a73      	ldr	r2, [pc, #460]	; (8002b74 <HAL_RCC_OscConfig+0x474>)
 80029a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fb95 	bl	80010dc <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b6:	f7fe fb91 	bl	80010dc <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e10c      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	4b6a      	ldr	r3, [pc, #424]	; (8002b74 <HAL_RCC_OscConfig+0x474>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x2ea>
 80029dc:	4b64      	ldr	r3, [pc, #400]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a63      	ldr	r2, [pc, #396]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	e01c      	b.n	8002a24 <HAL_RCC_OscConfig+0x324>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x30c>
 80029f2:	4b5f      	ldr	r3, [pc, #380]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	4a5e      	ldr	r2, [pc, #376]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6713      	str	r3, [r2, #112]	; 0x70
 80029fe:	4b5c      	ldr	r3, [pc, #368]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a5b      	ldr	r2, [pc, #364]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0x324>
 8002a0c:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	4a57      	ldr	r2, [pc, #348]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	; 0x70
 8002a18:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4a54      	ldr	r2, [pc, #336]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	f023 0304 	bic.w	r3, r3, #4
 8002a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d015      	beq.n	8002a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fb56 	bl	80010dc <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe fb52 	bl	80010dc <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0cb      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4a:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ee      	beq.n	8002a34 <HAL_RCC_OscConfig+0x334>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a58:	f7fe fb40 	bl	80010dc <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fb3c 	bl	80010dc <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0b5      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a76:	4b3e      	ldr	r3, [pc, #248]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ee      	bne.n	8002a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a88:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	4a38      	ldr	r2, [pc, #224]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80a1 	beq.w	8002be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a9e:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d05c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d141      	bne.n	8002b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fb10 	bl	80010dc <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fb0c 	bl	80010dc <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e087      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	3b01      	subs	r3, #1
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	491b      	ldr	r1, [pc, #108]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fae5 	bl	80010dc <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe fae1 	bl	80010dc <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e05c      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0f0      	beq.n	8002b16 <HAL_RCC_OscConfig+0x416>
 8002b34:	e054      	b.n	8002be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_RCC_OscConfig+0x478>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe face 	bl	80010dc <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe faca 	bl	80010dc <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e045      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_RCC_OscConfig+0x470>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x444>
 8002b62:	e03d      	b.n	8002be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e038      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40007000 	.word	0x40007000
 8002b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_RCC_OscConfig+0x4ec>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d028      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d121      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d11a      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bac:	4013      	ands	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d111      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800

08002bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0cc      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b68      	ldr	r3, [pc, #416]	; (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d90c      	bls.n	8002c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b65      	ldr	r3, [pc, #404]	; (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0b8      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c44:	4b59      	ldr	r3, [pc, #356]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4a58      	ldr	r2, [pc, #352]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c5c:	4b53      	ldr	r3, [pc, #332]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4a52      	ldr	r2, [pc, #328]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b50      	ldr	r3, [pc, #320]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	494d      	ldr	r1, [pc, #308]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d044      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d119      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e07f      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d003      	beq.n	8002cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	4b3f      	ldr	r3, [pc, #252]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e06f      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e067      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cce:	4b37      	ldr	r3, [pc, #220]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f023 0203 	bic.w	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4934      	ldr	r1, [pc, #208]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce0:	f7fe f9fc 	bl	80010dc <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce8:	f7fe f9f8 	bl	80010dc <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e04f      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 020c 	and.w	r2, r3, #12
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d1eb      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d10:	4b25      	ldr	r3, [pc, #148]	; (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d20c      	bcs.n	8002d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e032      	b.n	8002d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4916      	ldr	r1, [pc, #88]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d009      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	490e      	ldr	r1, [pc, #56]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d76:	f000 f821 	bl	8002dbc <HAL_RCC_GetSysClockFreq>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	490a      	ldr	r1, [pc, #40]	; (8002db0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	5ccb      	ldrb	r3, [r1, r3]
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fe72 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	0800492c 	.word	0x0800492c
 8002db4:	20000000 	.word	0x20000000
 8002db8:	20000004 	.word	0x20000004

08002dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc0:	b090      	sub	sp, #64	; 0x40
 8002dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc8:	2300      	movs	r3, #0
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dcc:	2300      	movs	r3, #0
 8002dce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd4:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d00d      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x40>
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	f200 80a1 	bhi.w	8002f28 <HAL_RCC_GetSysClockFreq+0x16c>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dee:	e09b      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df0:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002df2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002df4:	e09b      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002df6:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002df8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dfa:	e098      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dfc:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e06:	4b4d      	ldr	r3, [pc, #308]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d028      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e12:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	2200      	movs	r2, #0
 8002e1a:	623b      	str	r3, [r7, #32]
 8002e1c:	627a      	str	r2, [r7, #36]	; 0x24
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e24:	2100      	movs	r1, #0
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e28:	fb03 f201 	mul.w	r2, r3, r1
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	fb00 f303 	mul.w	r3, r0, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	4a43      	ldr	r2, [pc, #268]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e36:	fba0 1202 	umull	r1, r2, r0, r2
 8002e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e42:	4413      	add	r3, r2
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e48:	2200      	movs	r2, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	61fa      	str	r2, [r7, #28]
 8002e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e56:	f7fd f9c9 	bl	80001ec <__aeabi_uldivmod>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4613      	mov	r3, r2
 8002e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e62:	e053      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e64:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	617a      	str	r2, [r7, #20]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e76:	f04f 0b00 	mov.w	fp, #0
 8002e7a:	4652      	mov	r2, sl
 8002e7c:	465b      	mov	r3, fp
 8002e7e:	f04f 0000 	mov.w	r0, #0
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	0159      	lsls	r1, r3, #5
 8002e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e8c:	0150      	lsls	r0, r2, #5
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	ebb2 080a 	subs.w	r8, r2, sl
 8002e96:	eb63 090b 	sbc.w	r9, r3, fp
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ea6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002eaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002eae:	ebb2 0408 	subs.w	r4, r2, r8
 8002eb2:	eb63 0509 	sbc.w	r5, r3, r9
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	00eb      	lsls	r3, r5, #3
 8002ec0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec4:	00e2      	lsls	r2, r4, #3
 8002ec6:	4614      	mov	r4, r2
 8002ec8:	461d      	mov	r5, r3
 8002eca:	eb14 030a 	adds.w	r3, r4, sl
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	eb45 030b 	adc.w	r3, r5, fp
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	028b      	lsls	r3, r1, #10
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eec:	4621      	mov	r1, r4
 8002eee:	028a      	lsls	r2, r1, #10
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	60fa      	str	r2, [r7, #12]
 8002efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f00:	f7fd f974 	bl	80001ec <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f26:	e002      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3740      	adds	r7, #64	; 0x40
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	00b71b00 	.word	0x00b71b00

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f64:	f7ff fff0 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	0800493c 	.word	0x0800493c

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f8c:	f7ff ffdc 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0b5b      	lsrs	r3, r3, #13
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	0800493c 	.word	0x0800493c

08002fb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_RCC_GetClockConfig+0x5c>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0203 	and.w	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_RCC_GetClockConfig+0x5c>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <HAL_RCC_GetClockConfig+0x5c>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_GetClockConfig+0x5c>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_RCC_GetClockConfig+0x60>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	601a      	str	r2, [r3, #0]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	40023c00 	.word	0x40023c00

08003014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e041      	b.n	80030aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f839 	bl	80030b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f000 fac4 	bl	80035e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d001      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e04e      	b.n	800317e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a23      	ldr	r2, [pc, #140]	; (800318c <HAL_TIM_Base_Start_IT+0xc4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d022      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310a:	d01d      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <HAL_TIM_Base_Start_IT+0xc8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d018      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <HAL_TIM_Base_Start_IT+0xcc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <HAL_TIM_Base_Start_IT+0xd0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00e      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	; (800319c <HAL_TIM_Base_Start_IT+0xd4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0x80>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d111      	bne.n	800316c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b06      	cmp	r3, #6
 8003158:	d010      	beq.n	800317c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0201 	orr.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316a:	e007      	b.n	800317c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40010000 	.word	0x40010000
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800
 8003198:	40000c00 	.word	0x40000c00
 800319c:	40010400 	.word	0x40010400
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40001800 	.word	0x40001800

080031a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e041      	b.n	800323e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd fdcc 	bl	8000d6c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 f9fa 	bl	80035e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b02      	cmp	r3, #2
 800325a:	d122      	bne.n	80032a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d11b      	bne.n	80032a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f06f 0202 	mvn.w	r2, #2
 8003272:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f98a 	bl	80035a2 <HAL_TIM_IC_CaptureCallback>
 800328e:	e005      	b.n	800329c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f97c 	bl	800358e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f98d 	bl	80035b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d122      	bne.n	80032f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d11b      	bne.n	80032f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f06f 0204 	mvn.w	r2, #4
 80032c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f960 	bl	80035a2 <HAL_TIM_IC_CaptureCallback>
 80032e2:	e005      	b.n	80032f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f952 	bl	800358e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f963 	bl	80035b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b08      	cmp	r3, #8
 8003302:	d122      	bne.n	800334a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b08      	cmp	r3, #8
 8003310:	d11b      	bne.n	800334a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0208 	mvn.w	r2, #8
 800331a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2204      	movs	r2, #4
 8003320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f936 	bl	80035a2 <HAL_TIM_IC_CaptureCallback>
 8003336:	e005      	b.n	8003344 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f928 	bl	800358e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f939 	bl	80035b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b10      	cmp	r3, #16
 8003356:	d122      	bne.n	800339e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b10      	cmp	r3, #16
 8003364:	d11b      	bne.n	800339e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f06f 0210 	mvn.w	r2, #16
 800336e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2208      	movs	r2, #8
 8003374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f90c 	bl	80035a2 <HAL_TIM_IC_CaptureCallback>
 800338a:	e005      	b.n	8003398 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f8fe 	bl	800358e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f90f 	bl	80035b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10e      	bne.n	80033ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d107      	bne.n	80033ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f06f 0201 	mvn.w	r2, #1
 80033c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7fd fb1b 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b80      	cmp	r3, #128	; 0x80
 80033d6:	d10e      	bne.n	80033f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d107      	bne.n	80033f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fb45 	bl	8003a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d10e      	bne.n	8003422 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d107      	bne.n	8003422 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800341a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f8d4 	bl	80035ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	d10e      	bne.n	800344e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d107      	bne.n	800344e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f06f 0220 	mvn.w	r2, #32
 8003446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fb0f 	bl	8003a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003470:	2302      	movs	r3, #2
 8003472:	e088      	b.n	8003586 <HAL_TIM_IC_ConfigChannel+0x130>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11b      	bne.n	80034ba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f000 f945 	bl	8003720 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 020c 	bic.w	r2, r2, #12
 80034a4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6999      	ldr	r1, [r3, #24]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	619a      	str	r2, [r3, #24]
 80034b8:	e060      	b.n	800357c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d11c      	bne.n	80034fa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f000 f99a 	bl	8003808 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034e2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6999      	ldr	r1, [r3, #24]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	021a      	lsls	r2, r3, #8
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	619a      	str	r2, [r3, #24]
 80034f8:	e040      	b.n	800357c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d11b      	bne.n	8003538 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f000 f9b7 	bl	8003882 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 020c 	bic.w	r2, r2, #12
 8003522:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69d9      	ldr	r1, [r3, #28]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	61da      	str	r2, [r3, #28]
 8003536:	e021      	b.n	800357c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d11c      	bne.n	8003578 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f000 f9d4 	bl	80038fa <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003560:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69d9      	ldr	r1, [r3, #28]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	021a      	lsls	r2, r3, #8
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	61da      	str	r2, [r3, #28]
 8003576:	e001      	b.n	800357c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a40      	ldr	r2, [pc, #256]	; (80036f4 <TIM_Base_SetConfig+0x114>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d013      	beq.n	8003620 <TIM_Base_SetConfig+0x40>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fe:	d00f      	beq.n	8003620 <TIM_Base_SetConfig+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3d      	ldr	r2, [pc, #244]	; (80036f8 <TIM_Base_SetConfig+0x118>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00b      	beq.n	8003620 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3c      	ldr	r2, [pc, #240]	; (80036fc <TIM_Base_SetConfig+0x11c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3b      	ldr	r2, [pc, #236]	; (8003700 <TIM_Base_SetConfig+0x120>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <TIM_Base_SetConfig+0x40>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3a      	ldr	r2, [pc, #232]	; (8003704 <TIM_Base_SetConfig+0x124>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d108      	bne.n	8003632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2f      	ldr	r2, [pc, #188]	; (80036f4 <TIM_Base_SetConfig+0x114>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02b      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003640:	d027      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2c      	ldr	r2, [pc, #176]	; (80036f8 <TIM_Base_SetConfig+0x118>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d023      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2b      	ldr	r2, [pc, #172]	; (80036fc <TIM_Base_SetConfig+0x11c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d01f      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2a      	ldr	r2, [pc, #168]	; (8003700 <TIM_Base_SetConfig+0x120>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01b      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a29      	ldr	r2, [pc, #164]	; (8003704 <TIM_Base_SetConfig+0x124>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d017      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a28      	ldr	r2, [pc, #160]	; (8003708 <TIM_Base_SetConfig+0x128>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a27      	ldr	r2, [pc, #156]	; (800370c <TIM_Base_SetConfig+0x12c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00f      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a26      	ldr	r2, [pc, #152]	; (8003710 <TIM_Base_SetConfig+0x130>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00b      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a25      	ldr	r2, [pc, #148]	; (8003714 <TIM_Base_SetConfig+0x134>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a24      	ldr	r2, [pc, #144]	; (8003718 <TIM_Base_SetConfig+0x138>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a23      	ldr	r2, [pc, #140]	; (800371c <TIM_Base_SetConfig+0x13c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d108      	bne.n	80036a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <TIM_Base_SetConfig+0x114>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <TIM_Base_SetConfig+0xf8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a0c      	ldr	r2, [pc, #48]	; (8003704 <TIM_Base_SetConfig+0x124>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d103      	bne.n	80036e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	615a      	str	r2, [r3, #20]
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40010400 	.word	0x40010400
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800
 8003714:	40001800 	.word	0x40001800
 8003718:	40001c00 	.word	0x40001c00
 800371c:	40002000 	.word	0x40002000

08003720 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a28      	ldr	r2, [pc, #160]	; (80037ec <TIM_TI1_SetConfig+0xcc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01b      	beq.n	8003786 <TIM_TI1_SetConfig+0x66>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d017      	beq.n	8003786 <TIM_TI1_SetConfig+0x66>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <TIM_TI1_SetConfig+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <TIM_TI1_SetConfig+0x66>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <TIM_TI1_SetConfig+0xd4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00f      	beq.n	8003786 <TIM_TI1_SetConfig+0x66>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <TIM_TI1_SetConfig+0xd8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00b      	beq.n	8003786 <TIM_TI1_SetConfig+0x66>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a22      	ldr	r2, [pc, #136]	; (80037fc <TIM_TI1_SetConfig+0xdc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d007      	beq.n	8003786 <TIM_TI1_SetConfig+0x66>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a21      	ldr	r2, [pc, #132]	; (8003800 <TIM_TI1_SetConfig+0xe0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_TI1_SetConfig+0x66>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4a20      	ldr	r2, [pc, #128]	; (8003804 <TIM_TI1_SetConfig+0xe4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <TIM_TI1_SetConfig+0x6a>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <TIM_TI1_SetConfig+0x6c>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e003      	b.n	80037aa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f023 030a 	bic.w	r3, r3, #10
 80037c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f003 030a 	and.w	r3, r3, #10
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	621a      	str	r2, [r3, #32]
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40010000 	.word	0x40010000
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800
 80037f8:	40000c00 	.word	0x40000c00
 80037fc:	40010400 	.word	0x40010400
 8003800:	40014000 	.word	0x40014000
 8003804:	40001800 	.word	0x40001800

08003808 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f023 0210 	bic.w	r2, r3, #16
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003846:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	031b      	lsls	r3, r3, #12
 800384c:	b29b      	uxth	r3, r3
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800385a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003882:	b480      	push	{r7}
 8003884:	b087      	sub	sp, #28
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80038d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b087      	sub	sp, #28
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003926:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003938:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	031b      	lsls	r3, r3, #12
 800393e:	b29b      	uxth	r3, r3
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800394c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003988:	2302      	movs	r3, #2
 800398a:	e05a      	b.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a21      	ldr	r2, [pc, #132]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d022      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d8:	d01d      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d018      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00e      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d009      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10c      	bne.n	8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40010000 	.word	0x40010000
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800
 8003a5c:	40000c00 	.word	0x40000c00
 8003a60:	40010400 	.word	0x40010400
 8003a64:	40014000 	.word	0x40014000
 8003a68:	40001800 	.word	0x40001800

08003a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e03f      	b.n	8003b26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd fa2c 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2224      	movs	r2, #36	; 0x24
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fc7b 	bl	80043d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b0ba      	sub	sp, #232	; 0xe8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_UART_IRQHandler+0x66>
 8003b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fb65 	bl	800425e <UART_Receive_IT>
      return;
 8003b94:	e256      	b.n	8004044 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80de 	beq.w	8003d5c <HAL_UART_IRQHandler+0x22c>
 8003ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80d1 	beq.w	8003d5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_UART_IRQHandler+0xae>
 8003bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f043 0201 	orr.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_UART_IRQHandler+0xd2>
 8003bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0202 	orr.w	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_UART_IRQHandler+0xf6>
 8003c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d011      	beq.n	8003c56 <HAL_UART_IRQHandler+0x126>
 8003c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d105      	bne.n	8003c4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f043 0208 	orr.w	r2, r3, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 81ed 	beq.w	800403a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_UART_IRQHandler+0x14e>
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 faf0 	bl	800425e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <HAL_UART_IRQHandler+0x17a>
 8003ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d04f      	beq.n	8003d4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f9f8 	bl	80040a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d141      	bne.n	8003d42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1d9      	bne.n	8003cbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d013      	beq.n	8003d3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	4a7d      	ldr	r2, [pc, #500]	; (8003f0c <HAL_UART_IRQHandler+0x3dc>)
 8003d18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe f8b0 	bl	8001e84 <HAL_DMA_Abort_IT>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d34:	4610      	mov	r0, r2
 8003d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	e00e      	b.n	8003d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f99a 	bl	8004074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d40:	e00a      	b.n	8003d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f996 	bl	8004074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d48:	e006      	b.n	8003d58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f992 	bl	8004074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d56:	e170      	b.n	800403a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	bf00      	nop
    return;
 8003d5a:	e16e      	b.n	800403a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 814a 	bne.w	8003ffa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8143 	beq.w	8003ffa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 813c 	beq.w	8003ffa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	f040 80b4 	bne.w	8003f10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8140 	beq.w	800403e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	f080 8139 	bcs.w	800403e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dde:	f000 8088 	beq.w	8003ef2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1d9      	bne.n	8003de2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3314      	adds	r3, #20
 8003e34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e1      	bne.n	8003e2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3314      	adds	r3, #20
 8003e70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3314      	adds	r3, #20
 8003e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e3      	bne.n	8003e6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec2:	f023 0310 	bic.w	r3, r3, #16
 8003ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ed4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ed6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e3      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd ff59 	bl	8001da4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8c0 	bl	8004088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f08:	e099      	b.n	800403e <HAL_UART_IRQHandler+0x50e>
 8003f0a:	bf00      	nop
 8003f0c:	08004167 	.word	0x08004167
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 808b 	beq.w	8004042 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8086 	beq.w	8004042 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f5a:	647a      	str	r2, [r7, #68]	; 0x44
 8003f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e3      	bne.n	8003f36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3314      	adds	r3, #20
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3314      	adds	r3, #20
 8003f8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f92:	633a      	str	r2, [r7, #48]	; 0x30
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e3      	bne.n	8003f6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0310 	bic.w	r3, r3, #16
 8003fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003fd8:	61fa      	str	r2, [r7, #28]
 8003fda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	69b9      	ldr	r1, [r7, #24]
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e3      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f848 	bl	8004088 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ff8:	e023      	b.n	8004042 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_UART_IRQHandler+0x4ea>
 8004006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8bb 	bl	800418e <UART_Transmit_IT>
    return;
 8004018:	e014      	b.n	8004044 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00e      	beq.n	8004044 <HAL_UART_IRQHandler+0x514>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8fb 	bl	800422e <UART_EndTransmit_IT>
    return;
 8004038:	e004      	b.n	8004044 <HAL_UART_IRQHandler+0x514>
    return;
 800403a:	bf00      	nop
 800403c:	e002      	b.n	8004044 <HAL_UART_IRQHandler+0x514>
      return;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <HAL_UART_IRQHandler+0x514>
      return;
 8004042:	bf00      	nop
  }
}
 8004044:	37e8      	adds	r7, #232	; 0xe8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop

0800404c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b095      	sub	sp, #84	; 0x54
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040c8:	643a      	str	r2, [r7, #64]	; 0x40
 80040ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3314      	adds	r3, #20
 80040e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3314      	adds	r3, #20
 80040fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	2b01      	cmp	r3, #1
 8004116:	d119      	bne.n	800414c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	60bb      	str	r3, [r7, #8]
   return(result);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f023 0310 	bic.w	r3, r3, #16
 800412e:	647b      	str	r3, [r7, #68]	; 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004138:	61ba      	str	r2, [r7, #24]
 800413a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	613b      	str	r3, [r7, #16]
   return(result);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e5      	bne.n	8004118 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
}
 800415a:	bf00      	nop
 800415c:	3754      	adds	r7, #84	; 0x54
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff ff77 	bl	8004074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b21      	cmp	r3, #33	; 0x21
 80041a0:	d13e      	bne.n	8004220 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041aa:	d114      	bne.n	80041d6 <UART_Transmit_IT+0x48>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d110      	bne.n	80041d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	1c9a      	adds	r2, r3, #2
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	621a      	str	r2, [r3, #32]
 80041d4:	e008      	b.n	80041e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	1c59      	adds	r1, r3, #1
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6211      	str	r1, [r2, #32]
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4619      	mov	r1, r3
 80041f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10f      	bne.n	800421c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800420a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004244:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fefc 	bl	800404c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b08c      	sub	sp, #48	; 0x30
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b22      	cmp	r3, #34	; 0x22
 8004270:	f040 80ab 	bne.w	80043ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427c:	d117      	bne.n	80042ae <UART_Receive_IT+0x50>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d113      	bne.n	80042ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004286:	2300      	movs	r3, #0
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429c:	b29a      	uxth	r2, r3
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	1c9a      	adds	r2, r3, #2
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
 80042ac:	e026      	b.n	80042fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c0:	d007      	beq.n	80042d2 <UART_Receive_IT+0x74>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <UART_Receive_IT+0x82>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	e008      	b.n	80042f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29b      	uxth	r3, r3
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4619      	mov	r1, r3
 800430a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800430c:	2b00      	cmp	r3, #0
 800430e:	d15a      	bne.n	80043c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0220 	bic.w	r2, r2, #32
 800431e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800432e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	2b01      	cmp	r3, #1
 800434e:	d135      	bne.n	80043bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	613b      	str	r3, [r7, #16]
   return(result);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f023 0310 	bic.w	r3, r3, #16
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004376:	623a      	str	r2, [r7, #32]
 8004378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	69f9      	ldr	r1, [r7, #28]
 800437c:	6a3a      	ldr	r2, [r7, #32]
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	61bb      	str	r3, [r7, #24]
   return(result);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e5      	bne.n	8004356 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b10      	cmp	r3, #16
 8004396:	d10a      	bne.n	80043ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff fe67 	bl	8004088 <HAL_UARTEx_RxEventCallback>
 80043ba:	e002      	b.n	80043c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fe4f 	bl	8004060 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e002      	b.n	80043cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e000      	b.n	80043cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3730      	adds	r7, #48	; 0x30
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d8:	b0c0      	sub	sp, #256	; 0x100
 80043da:	af00      	add	r7, sp, #0
 80043dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	68d9      	ldr	r1, [r3, #12]
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	ea40 0301 	orr.w	r3, r0, r1
 80043fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	431a      	orrs	r2, r3
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	431a      	orrs	r2, r3
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800442c:	f021 010c 	bic.w	r1, r1, #12
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800443a:	430b      	orrs	r3, r1
 800443c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444e:	6999      	ldr	r1, [r3, #24]
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	ea40 0301 	orr.w	r3, r0, r1
 800445a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b8f      	ldr	r3, [pc, #572]	; (80046a0 <UART_SetConfig+0x2cc>)
 8004464:	429a      	cmp	r2, r3
 8004466:	d005      	beq.n	8004474 <UART_SetConfig+0xa0>
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b8d      	ldr	r3, [pc, #564]	; (80046a4 <UART_SetConfig+0x2d0>)
 8004470:	429a      	cmp	r2, r3
 8004472:	d104      	bne.n	800447e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004474:	f7fe fd88 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 8004478:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800447c:	e003      	b.n	8004486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800447e:	f7fe fd6f 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8004482:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004490:	f040 810c 	bne.w	80046ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004498:	2200      	movs	r2, #0
 800449a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800449e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	1891      	adds	r1, r2, r2
 80044ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80044ae:	415b      	adcs	r3, r3
 80044b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044b6:	4621      	mov	r1, r4
 80044b8:	eb12 0801 	adds.w	r8, r2, r1
 80044bc:	4629      	mov	r1, r5
 80044be:	eb43 0901 	adc.w	r9, r3, r1
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044d6:	4690      	mov	r8, r2
 80044d8:	4699      	mov	r9, r3
 80044da:	4623      	mov	r3, r4
 80044dc:	eb18 0303 	adds.w	r3, r8, r3
 80044e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044e4:	462b      	mov	r3, r5
 80044e6:	eb49 0303 	adc.w	r3, r9, r3
 80044ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004502:	460b      	mov	r3, r1
 8004504:	18db      	adds	r3, r3, r3
 8004506:	653b      	str	r3, [r7, #80]	; 0x50
 8004508:	4613      	mov	r3, r2
 800450a:	eb42 0303 	adc.w	r3, r2, r3
 800450e:	657b      	str	r3, [r7, #84]	; 0x54
 8004510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004518:	f7fb fe68 	bl	80001ec <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4b61      	ldr	r3, [pc, #388]	; (80046a8 <UART_SetConfig+0x2d4>)
 8004522:	fba3 2302 	umull	r2, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	011c      	lsls	r4, r3, #4
 800452a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800452e:	2200      	movs	r2, #0
 8004530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004534:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800453c:	4642      	mov	r2, r8
 800453e:	464b      	mov	r3, r9
 8004540:	1891      	adds	r1, r2, r2
 8004542:	64b9      	str	r1, [r7, #72]	; 0x48
 8004544:	415b      	adcs	r3, r3
 8004546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800454c:	4641      	mov	r1, r8
 800454e:	eb12 0a01 	adds.w	sl, r2, r1
 8004552:	4649      	mov	r1, r9
 8004554:	eb43 0b01 	adc.w	fp, r3, r1
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800456c:	4692      	mov	sl, r2
 800456e:	469b      	mov	fp, r3
 8004570:	4643      	mov	r3, r8
 8004572:	eb1a 0303 	adds.w	r3, sl, r3
 8004576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800457a:	464b      	mov	r3, r9
 800457c:	eb4b 0303 	adc.w	r3, fp, r3
 8004580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004590:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004598:	460b      	mov	r3, r1
 800459a:	18db      	adds	r3, r3, r3
 800459c:	643b      	str	r3, [r7, #64]	; 0x40
 800459e:	4613      	mov	r3, r2
 80045a0:	eb42 0303 	adc.w	r3, r2, r3
 80045a4:	647b      	str	r3, [r7, #68]	; 0x44
 80045a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045ae:	f7fb fe1d 	bl	80001ec <__aeabi_uldivmod>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <UART_SetConfig+0x2d4>)
 80045ba:	fba3 2301 	umull	r2, r3, r3, r1
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2264      	movs	r2, #100	; 0x64
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	1acb      	subs	r3, r1, r3
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045ce:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <UART_SetConfig+0x2d4>)
 80045d0:	fba3 2302 	umull	r2, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045dc:	441c      	add	r4, r3
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045f8:	415b      	adcs	r3, r3
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004600:	4641      	mov	r1, r8
 8004602:	1851      	adds	r1, r2, r1
 8004604:	6339      	str	r1, [r7, #48]	; 0x30
 8004606:	4649      	mov	r1, r9
 8004608:	414b      	adcs	r3, r1
 800460a:	637b      	str	r3, [r7, #52]	; 0x34
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004618:	4659      	mov	r1, fp
 800461a:	00cb      	lsls	r3, r1, #3
 800461c:	4651      	mov	r1, sl
 800461e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004622:	4651      	mov	r1, sl
 8004624:	00ca      	lsls	r2, r1, #3
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	4603      	mov	r3, r0
 800462c:	4642      	mov	r2, r8
 800462e:	189b      	adds	r3, r3, r2
 8004630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004634:	464b      	mov	r3, r9
 8004636:	460a      	mov	r2, r1
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800464c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004654:	460b      	mov	r3, r1
 8004656:	18db      	adds	r3, r3, r3
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
 800465a:	4613      	mov	r3, r2
 800465c:	eb42 0303 	adc.w	r3, r2, r3
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800466a:	f7fb fdbf 	bl	80001ec <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <UART_SetConfig+0x2d4>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <UART_SetConfig+0x2d4>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 0207 	and.w	r2, r3, #7
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4422      	add	r2, r4
 800469a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800469c:	e105      	b.n	80048aa <UART_SetConfig+0x4d6>
 800469e:	bf00      	nop
 80046a0:	40011000 	.word	0x40011000
 80046a4:	40011400 	.word	0x40011400
 80046a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046be:	4642      	mov	r2, r8
 80046c0:	464b      	mov	r3, r9
 80046c2:	1891      	adds	r1, r2, r2
 80046c4:	6239      	str	r1, [r7, #32]
 80046c6:	415b      	adcs	r3, r3
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ce:	4641      	mov	r1, r8
 80046d0:	1854      	adds	r4, r2, r1
 80046d2:	4649      	mov	r1, r9
 80046d4:	eb43 0501 	adc.w	r5, r3, r1
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	00eb      	lsls	r3, r5, #3
 80046e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e6:	00e2      	lsls	r2, r4, #3
 80046e8:	4614      	mov	r4, r2
 80046ea:	461d      	mov	r5, r3
 80046ec:	4643      	mov	r3, r8
 80046ee:	18e3      	adds	r3, r4, r3
 80046f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046f4:	464b      	mov	r3, r9
 80046f6:	eb45 0303 	adc.w	r3, r5, r3
 80046fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800470a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800471a:	4629      	mov	r1, r5
 800471c:	008b      	lsls	r3, r1, #2
 800471e:	4621      	mov	r1, r4
 8004720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004724:	4621      	mov	r1, r4
 8004726:	008a      	lsls	r2, r1, #2
 8004728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800472c:	f7fb fd5e 	bl	80001ec <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4b60      	ldr	r3, [pc, #384]	; (80048b8 <UART_SetConfig+0x4e4>)
 8004736:	fba3 2302 	umull	r2, r3, r3, r2
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	011c      	lsls	r4, r3, #4
 800473e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004742:	2200      	movs	r2, #0
 8004744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800474c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	1891      	adds	r1, r2, r2
 8004756:	61b9      	str	r1, [r7, #24]
 8004758:	415b      	adcs	r3, r3
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004760:	4641      	mov	r1, r8
 8004762:	1851      	adds	r1, r2, r1
 8004764:	6139      	str	r1, [r7, #16]
 8004766:	4649      	mov	r1, r9
 8004768:	414b      	adcs	r3, r1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004778:	4659      	mov	r1, fp
 800477a:	00cb      	lsls	r3, r1, #3
 800477c:	4651      	mov	r1, sl
 800477e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004782:	4651      	mov	r1, sl
 8004784:	00ca      	lsls	r2, r1, #3
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	4603      	mov	r3, r0
 800478c:	4642      	mov	r2, r8
 800478e:	189b      	adds	r3, r3, r2
 8004790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004794:	464b      	mov	r3, r9
 8004796:	460a      	mov	r2, r1
 8004798:	eb42 0303 	adc.w	r3, r2, r3
 800479c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047b8:	4649      	mov	r1, r9
 80047ba:	008b      	lsls	r3, r1, #2
 80047bc:	4641      	mov	r1, r8
 80047be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c2:	4641      	mov	r1, r8
 80047c4:	008a      	lsls	r2, r1, #2
 80047c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ca:	f7fb fd0f 	bl	80001ec <__aeabi_uldivmod>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4b39      	ldr	r3, [pc, #228]	; (80048b8 <UART_SetConfig+0x4e4>)
 80047d4:	fba3 1302 	umull	r1, r3, r3, r2
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	2164      	movs	r1, #100	; 0x64
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	3332      	adds	r3, #50	; 0x32
 80047e6:	4a34      	ldr	r2, [pc, #208]	; (80048b8 <UART_SetConfig+0x4e4>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f2:	441c      	add	r4, r3
 80047f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f8:	2200      	movs	r2, #0
 80047fa:	673b      	str	r3, [r7, #112]	; 0x70
 80047fc:	677a      	str	r2, [r7, #116]	; 0x74
 80047fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004802:	4642      	mov	r2, r8
 8004804:	464b      	mov	r3, r9
 8004806:	1891      	adds	r1, r2, r2
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	415b      	adcs	r3, r3
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004812:	4641      	mov	r1, r8
 8004814:	1851      	adds	r1, r2, r1
 8004816:	6039      	str	r1, [r7, #0]
 8004818:	4649      	mov	r1, r9
 800481a:	414b      	adcs	r3, r1
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800482a:	4659      	mov	r1, fp
 800482c:	00cb      	lsls	r3, r1, #3
 800482e:	4651      	mov	r1, sl
 8004830:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004834:	4651      	mov	r1, sl
 8004836:	00ca      	lsls	r2, r1, #3
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	4603      	mov	r3, r0
 800483e:	4642      	mov	r2, r8
 8004840:	189b      	adds	r3, r3, r2
 8004842:	66bb      	str	r3, [r7, #104]	; 0x68
 8004844:	464b      	mov	r3, r9
 8004846:	460a      	mov	r2, r1
 8004848:	eb42 0303 	adc.w	r3, r2, r3
 800484c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800484e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	663b      	str	r3, [r7, #96]	; 0x60
 8004858:	667a      	str	r2, [r7, #100]	; 0x64
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004866:	4649      	mov	r1, r9
 8004868:	008b      	lsls	r3, r1, #2
 800486a:	4641      	mov	r1, r8
 800486c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004870:	4641      	mov	r1, r8
 8004872:	008a      	lsls	r2, r1, #2
 8004874:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004878:	f7fb fcb8 	bl	80001ec <__aeabi_uldivmod>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <UART_SetConfig+0x4e4>)
 8004882:	fba3 1302 	umull	r1, r3, r3, r2
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2164      	movs	r1, #100	; 0x64
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	3332      	adds	r3, #50	; 0x32
 8004894:	4a08      	ldr	r2, [pc, #32]	; (80048b8 <UART_SetConfig+0x4e4>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4422      	add	r2, r4
 80048a8:	609a      	str	r2, [r3, #8]
}
 80048aa:	bf00      	nop
 80048ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048b0:	46bd      	mov	sp, r7
 80048b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b6:	bf00      	nop
 80048b8:	51eb851f 	.word	0x51eb851f

080048bc <__libc_init_array>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	4d0d      	ldr	r5, [pc, #52]	; (80048f4 <__libc_init_array+0x38>)
 80048c0:	4c0d      	ldr	r4, [pc, #52]	; (80048f8 <__libc_init_array+0x3c>)
 80048c2:	1b64      	subs	r4, r4, r5
 80048c4:	10a4      	asrs	r4, r4, #2
 80048c6:	2600      	movs	r6, #0
 80048c8:	42a6      	cmp	r6, r4
 80048ca:	d109      	bne.n	80048e0 <__libc_init_array+0x24>
 80048cc:	4d0b      	ldr	r5, [pc, #44]	; (80048fc <__libc_init_array+0x40>)
 80048ce:	4c0c      	ldr	r4, [pc, #48]	; (8004900 <__libc_init_array+0x44>)
 80048d0:	f000 f820 	bl	8004914 <_init>
 80048d4:	1b64      	subs	r4, r4, r5
 80048d6:	10a4      	asrs	r4, r4, #2
 80048d8:	2600      	movs	r6, #0
 80048da:	42a6      	cmp	r6, r4
 80048dc:	d105      	bne.n	80048ea <__libc_init_array+0x2e>
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e4:	4798      	blx	r3
 80048e6:	3601      	adds	r6, #1
 80048e8:	e7ee      	b.n	80048c8 <__libc_init_array+0xc>
 80048ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ee:	4798      	blx	r3
 80048f0:	3601      	adds	r6, #1
 80048f2:	e7f2      	b.n	80048da <__libc_init_array+0x1e>
 80048f4:	08004954 	.word	0x08004954
 80048f8:	08004954 	.word	0x08004954
 80048fc:	08004954 	.word	0x08004954
 8004900:	08004958 	.word	0x08004958

08004904 <memset>:
 8004904:	4402      	add	r2, r0
 8004906:	4603      	mov	r3, r0
 8004908:	4293      	cmp	r3, r2
 800490a:	d100      	bne.n	800490e <memset+0xa>
 800490c:	4770      	bx	lr
 800490e:	f803 1b01 	strb.w	r1, [r3], #1
 8004912:	e7f9      	b.n	8004908 <memset+0x4>

08004914 <_init>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	bf00      	nop
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr

08004920 <_fini>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	bf00      	nop
 8004924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004926:	bc08      	pop	{r3}
 8004928:	469e      	mov	lr, r3
 800492a:	4770      	bx	lr
