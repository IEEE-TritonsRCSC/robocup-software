// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_rcon_remotecontrol.proto

package proto.gc;

public final class SslGcRconRemotecontrol {
  private SslGcRconRemotecontrol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * All possible request types that the remote control can make
   * </pre>
   *
   * Protobuf enum {@code proto.gc.RemoteControlRequestType}
   */
  public enum RemoteControlRequestType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_REQUEST_TYPE = 0;</code>
     */
    UNKNOWN_REQUEST_TYPE(0),
    /**
     * <code>EMERGENCY_STOP = 1;</code>
     */
    EMERGENCY_STOP(1),
    /**
     * <code>ROBOT_SUBSTITUTION = 2;</code>
     */
    ROBOT_SUBSTITUTION(2),
    /**
     * <code>TIMEOUT = 3;</code>
     */
    TIMEOUT(3),
    /**
     * <code>CHALLENGE_FLAG = 4;</code>
     */
    CHALLENGE_FLAG(4),
    /**
     * <code>CHANGE_KEEPER_ID = 5;</code>
     */
    CHANGE_KEEPER_ID(5),
    /**
     * <code>STOP_TIMEOUT = 6;</code>
     */
    STOP_TIMEOUT(6),
    ;

    /**
     * <code>UNKNOWN_REQUEST_TYPE = 0;</code>
     */
    public static final int UNKNOWN_REQUEST_TYPE_VALUE = 0;
    /**
     * <code>EMERGENCY_STOP = 1;</code>
     */
    public static final int EMERGENCY_STOP_VALUE = 1;
    /**
     * <code>ROBOT_SUBSTITUTION = 2;</code>
     */
    public static final int ROBOT_SUBSTITUTION_VALUE = 2;
    /**
     * <code>TIMEOUT = 3;</code>
     */
    public static final int TIMEOUT_VALUE = 3;
    /**
     * <code>CHALLENGE_FLAG = 4;</code>
     */
    public static final int CHALLENGE_FLAG_VALUE = 4;
    /**
     * <code>CHANGE_KEEPER_ID = 5;</code>
     */
    public static final int CHANGE_KEEPER_ID_VALUE = 5;
    /**
     * <code>STOP_TIMEOUT = 6;</code>
     */
    public static final int STOP_TIMEOUT_VALUE = 6;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RemoteControlRequestType valueOf(int value) {
      return forNumber(value);
    }

    public static RemoteControlRequestType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_REQUEST_TYPE;
        case 1: return EMERGENCY_STOP;
        case 2: return ROBOT_SUBSTITUTION;
        case 3: return TIMEOUT;
        case 4: return CHALLENGE_FLAG;
        case 5: return CHANGE_KEEPER_ID;
        case 6: return STOP_TIMEOUT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RemoteControlRequestType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RemoteControlRequestType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RemoteControlRequestType>() {
            public RemoteControlRequestType findValueByNumber(int number) {
              return RemoteControlRequestType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return proto.gc.SslGcRconRemotecontrol.getDescriptor().getEnumTypes().get(0);
    }

    private static final RemoteControlRequestType[] VALUES = values();

    public static RemoteControlRequestType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RemoteControlRequestType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:proto.gc.RemoteControlRequestType)
  }

  public interface RemoteControlRegistrationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.gc.RemoteControlRegistration)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * the team to be controlled
     * </pre>
     *
     * <code>required .proto.simulation.Team team = 1;</code>
     */
    boolean hasTeam();
    /**
     * <pre>
     * the team to be controlled
     * </pre>
     *
     * <code>required .proto.simulation.Team team = 1;</code>
     */
    proto.simulation.SslGcCommon.Team getTeam();

    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 2;</code>
     */
    boolean hasSignature();
    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 2;</code>
     */
    proto.gc.SslGcRcon.Signature getSignature();
    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 2;</code>
     */
    proto.gc.SslGcRcon.SignatureOrBuilder getSignatureOrBuilder();
  }
  /**
   * <pre>
   * a registration that must be send by the remote control to the controller as the very first message
   * </pre>
   *
   * Protobuf type {@code proto.gc.RemoteControlRegistration}
   */
  public  static final class RemoteControlRegistration extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:proto.gc.RemoteControlRegistration)
      RemoteControlRegistrationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RemoteControlRegistration.newBuilder() to construct.
    private RemoteControlRegistration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RemoteControlRegistration() {
      team_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RemoteControlRegistration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              proto.simulation.SslGcCommon.Team value = proto.simulation.SslGcCommon.Team.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                team_ = rawValue;
              }
              break;
            }
            case 18: {
              proto.gc.SslGcRcon.Signature.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = signature_.toBuilder();
              }
              signature_ = input.readMessage(proto.gc.SslGcRcon.Signature.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(signature_);
                signature_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlRegistration_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlRegistration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration.class, proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration.Builder.class);
    }

    private int bitField0_;
    public static final int TEAM_FIELD_NUMBER = 1;
    private int team_;
    /**
     * <pre>
     * the team to be controlled
     * </pre>
     *
     * <code>required .proto.simulation.Team team = 1;</code>
     */
    public boolean hasTeam() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * the team to be controlled
     * </pre>
     *
     * <code>required .proto.simulation.Team team = 1;</code>
     */
    public proto.simulation.SslGcCommon.Team getTeam() {
      @SuppressWarnings("deprecation")
      proto.simulation.SslGcCommon.Team result = proto.simulation.SslGcCommon.Team.valueOf(team_);
      return result == null ? proto.simulation.SslGcCommon.Team.UNKNOWN : result;
    }

    public static final int SIGNATURE_FIELD_NUMBER = 2;
    private proto.gc.SslGcRcon.Signature signature_;
    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 2;</code>
     */
    public boolean hasSignature() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 2;</code>
     */
    public proto.gc.SslGcRcon.Signature getSignature() {
      return signature_ == null ? proto.gc.SslGcRcon.Signature.getDefaultInstance() : signature_;
    }
    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 2;</code>
     */
    public proto.gc.SslGcRcon.SignatureOrBuilder getSignatureOrBuilder() {
      return signature_ == null ? proto.gc.SslGcRcon.Signature.getDefaultInstance() : signature_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTeam()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasSignature()) {
        if (!getSignature().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, team_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getSignature());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, team_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSignature());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration)) {
        return super.equals(obj);
      }
      proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration other = (proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration) obj;

      boolean result = true;
      result = result && (hasTeam() == other.hasTeam());
      if (hasTeam()) {
        result = result && team_ == other.team_;
      }
      result = result && (hasSignature() == other.hasSignature());
      if (hasSignature()) {
        result = result && getSignature()
            .equals(other.getSignature());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTeam()) {
        hash = (37 * hash) + TEAM_FIELD_NUMBER;
        hash = (53 * hash) + team_;
      }
      if (hasSignature()) {
        hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
        hash = (53 * hash) + getSignature().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * a registration that must be send by the remote control to the controller as the very first message
     * </pre>
     *
     * Protobuf type {@code proto.gc.RemoteControlRegistration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.gc.RemoteControlRegistration)
        proto.gc.SslGcRconRemotecontrol.RemoteControlRegistrationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlRegistration_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlRegistration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration.class, proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration.Builder.class);
      }

      // Construct using proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSignatureFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        team_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (signatureBuilder_ == null) {
          signature_ = null;
        } else {
          signatureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlRegistration_descriptor;
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration getDefaultInstanceForType() {
        return proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration.getDefaultInstance();
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration build() {
        proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration buildPartial() {
        proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration result = new proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.team_ = team_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (signatureBuilder_ == null) {
          result.signature_ = signature_;
        } else {
          result.signature_ = signatureBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration) {
          return mergeFrom((proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration other) {
        if (other == proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration.getDefaultInstance()) return this;
        if (other.hasTeam()) {
          setTeam(other.getTeam());
        }
        if (other.hasSignature()) {
          mergeSignature(other.getSignature());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasTeam()) {
          return false;
        }
        if (hasSignature()) {
          if (!getSignature().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int team_ = 0;
      /**
       * <pre>
       * the team to be controlled
       * </pre>
       *
       * <code>required .proto.simulation.Team team = 1;</code>
       */
      public boolean hasTeam() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * the team to be controlled
       * </pre>
       *
       * <code>required .proto.simulation.Team team = 1;</code>
       */
      public proto.simulation.SslGcCommon.Team getTeam() {
        @SuppressWarnings("deprecation")
        proto.simulation.SslGcCommon.Team result = proto.simulation.SslGcCommon.Team.valueOf(team_);
        return result == null ? proto.simulation.SslGcCommon.Team.UNKNOWN : result;
      }
      /**
       * <pre>
       * the team to be controlled
       * </pre>
       *
       * <code>required .proto.simulation.Team team = 1;</code>
       */
      public Builder setTeam(proto.simulation.SslGcCommon.Team value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        team_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the team to be controlled
       * </pre>
       *
       * <code>required .proto.simulation.Team team = 1;</code>
       */
      public Builder clearTeam() {
        bitField0_ = (bitField0_ & ~0x00000001);
        team_ = 0;
        onChanged();
        return this;
      }

      private proto.gc.SslGcRcon.Signature signature_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          proto.gc.SslGcRcon.Signature, proto.gc.SslGcRcon.Signature.Builder, proto.gc.SslGcRcon.SignatureOrBuilder> signatureBuilder_;
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 2;</code>
       */
      public boolean hasSignature() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 2;</code>
       */
      public proto.gc.SslGcRcon.Signature getSignature() {
        if (signatureBuilder_ == null) {
          return signature_ == null ? proto.gc.SslGcRcon.Signature.getDefaultInstance() : signature_;
        } else {
          return signatureBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 2;</code>
       */
      public Builder setSignature(proto.gc.SslGcRcon.Signature value) {
        if (signatureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          signature_ = value;
          onChanged();
        } else {
          signatureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 2;</code>
       */
      public Builder setSignature(
          proto.gc.SslGcRcon.Signature.Builder builderForValue) {
        if (signatureBuilder_ == null) {
          signature_ = builderForValue.build();
          onChanged();
        } else {
          signatureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 2;</code>
       */
      public Builder mergeSignature(proto.gc.SslGcRcon.Signature value) {
        if (signatureBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              signature_ != null &&
              signature_ != proto.gc.SslGcRcon.Signature.getDefaultInstance()) {
            signature_ =
              proto.gc.SslGcRcon.Signature.newBuilder(signature_).mergeFrom(value).buildPartial();
          } else {
            signature_ = value;
          }
          onChanged();
        } else {
          signatureBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 2;</code>
       */
      public Builder clearSignature() {
        if (signatureBuilder_ == null) {
          signature_ = null;
          onChanged();
        } else {
          signatureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 2;</code>
       */
      public proto.gc.SslGcRcon.Signature.Builder getSignatureBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getSignatureFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 2;</code>
       */
      public proto.gc.SslGcRcon.SignatureOrBuilder getSignatureOrBuilder() {
        if (signatureBuilder_ != null) {
          return signatureBuilder_.getMessageOrBuilder();
        } else {
          return signature_ == null ?
              proto.gc.SslGcRcon.Signature.getDefaultInstance() : signature_;
        }
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          proto.gc.SslGcRcon.Signature, proto.gc.SslGcRcon.Signature.Builder, proto.gc.SslGcRcon.SignatureOrBuilder> 
          getSignatureFieldBuilder() {
        if (signatureBuilder_ == null) {
          signatureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              proto.gc.SslGcRcon.Signature, proto.gc.SslGcRcon.Signature.Builder, proto.gc.SslGcRcon.SignatureOrBuilder>(
                  getSignature(),
                  getParentForChildren(),
                  isClean());
          signature_ = null;
        }
        return signatureBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:proto.gc.RemoteControlRegistration)
    }

    // @@protoc_insertion_point(class_scope:proto.gc.RemoteControlRegistration)
    private static final proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration();
    }

    public static proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<RemoteControlRegistration>
        PARSER = new com.google.protobuf.AbstractParser<RemoteControlRegistration>() {
      @java.lang.Override
      public RemoteControlRegistration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RemoteControlRegistration(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RemoteControlRegistration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RemoteControlRegistration> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public proto.gc.SslGcRconRemotecontrol.RemoteControlRegistration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RemoteControlToControllerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.gc.RemoteControlToController)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 1;</code>
     */
    boolean hasSignature();
    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 1;</code>
     */
    proto.gc.SslGcRcon.Signature getSignature();
    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 1;</code>
     */
    proto.gc.SslGcRcon.SignatureOrBuilder getSignatureOrBuilder();

    /**
     * <pre>
     * send a ping to the GC to test if the connection is still open.
     * the value is ignored and a reply is sent back
     * </pre>
     *
     * <code>optional .proto.gc.RemoteControlToController.Request request = 2;</code>
     */
    boolean hasRequest();
    /**
     * <pre>
     * send a ping to the GC to test if the connection is still open.
     * the value is ignored and a reply is sent back
     * </pre>
     *
     * <code>optional .proto.gc.RemoteControlToController.Request request = 2;</code>
     */
    proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request getRequest();

    /**
     * <pre>
     * request a new desired keeper id
     * </pre>
     *
     * <code>optional int32 desired_keeper = 3;</code>
     */
    boolean hasDesiredKeeper();
    /**
     * <pre>
     * request a new desired keeper id
     * </pre>
     *
     * <code>optional int32 desired_keeper = 3;</code>
     */
    int getDesiredKeeper();

    /**
     * <pre>
     * true: request to substitute a robot at the next possibility
     * false: cancel request
     * </pre>
     *
     * <code>optional bool request_robot_substitution = 4;</code>
     */
    boolean hasRequestRobotSubstitution();
    /**
     * <pre>
     * true: request to substitute a robot at the next possibility
     * false: cancel request
     * </pre>
     *
     * <code>optional bool request_robot_substitution = 4;</code>
     */
    boolean getRequestRobotSubstitution();

    /**
     * <pre>
     * true: request a timeout with the next stoppage
     * false: cancel the request
     * </pre>
     *
     * <code>optional bool request_timeout = 5;</code>
     */
    boolean hasRequestTimeout();
    /**
     * <pre>
     * true: request a timeout with the next stoppage
     * false: cancel the request
     * </pre>
     *
     * <code>optional bool request_timeout = 5;</code>
     */
    boolean getRequestTimeout();

    /**
     * <pre>
     * true: initiate an emergency stop
     * false: cancel the request
     * </pre>
     *
     * <code>optional bool request_emergency_stop = 6;</code>
     */
    boolean hasRequestEmergencyStop();
    /**
     * <pre>
     * true: initiate an emergency stop
     * false: cancel the request
     * </pre>
     *
     * <code>optional bool request_emergency_stop = 6;</code>
     */
    boolean getRequestEmergencyStop();

    public proto.gc.SslGcRconRemotecontrol.RemoteControlToController.MsgCase getMsgCase();
  }
  /**
   * <pre>
   * wrapper for all messages from the remote control to the controller
   * </pre>
   *
   * Protobuf type {@code proto.gc.RemoteControlToController}
   */
  public  static final class RemoteControlToController extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:proto.gc.RemoteControlToController)
      RemoteControlToControllerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RemoteControlToController.newBuilder() to construct.
    private RemoteControlToController(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RemoteControlToController() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RemoteControlToController(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              proto.gc.SslGcRcon.Signature.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = signature_.toBuilder();
              }
              signature_ = input.readMessage(proto.gc.SslGcRcon.Signature.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(signature_);
                signature_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
              proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request value = proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                msgCase_ = 2;
                msg_ = rawValue;
              }
              break;
            }
            case 24: {
              msgCase_ = 3;
              msg_ = input.readInt32();
              break;
            }
            case 32: {
              msgCase_ = 4;
              msg_ = input.readBool();
              break;
            }
            case 40: {
              msgCase_ = 5;
              msg_ = input.readBool();
              break;
            }
            case 48: {
              msgCase_ = 6;
              msg_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlToController_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlToController_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              proto.gc.SslGcRconRemotecontrol.RemoteControlToController.class, proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Builder.class);
    }

    /**
     * Protobuf enum {@code proto.gc.RemoteControlToController.Request}
     */
    public enum Request
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNKNOWN = 0;</code>
       */
      UNKNOWN(0),
      /**
       * <pre>
       * Ping the GC to test the connection. The GC will respond with OK and the current team state
       * </pre>
       *
       * <code>PING = 1;</code>
       */
      PING(1),
      /**
       * <pre>
       * Raise a challenge flag (this is not revocable)
       * </pre>
       *
       * <code>CHALLENGE_FLAG = 2;</code>
       */
      CHALLENGE_FLAG(2),
      /**
       * <pre>
       * Stop an ongoing timeout
       * </pre>
       *
       * <code>STOP_TIMEOUT = 3;</code>
       */
      STOP_TIMEOUT(3),
      ;

      /**
       * <code>UNKNOWN = 0;</code>
       */
      public static final int UNKNOWN_VALUE = 0;
      /**
       * <pre>
       * Ping the GC to test the connection. The GC will respond with OK and the current team state
       * </pre>
       *
       * <code>PING = 1;</code>
       */
      public static final int PING_VALUE = 1;
      /**
       * <pre>
       * Raise a challenge flag (this is not revocable)
       * </pre>
       *
       * <code>CHALLENGE_FLAG = 2;</code>
       */
      public static final int CHALLENGE_FLAG_VALUE = 2;
      /**
       * <pre>
       * Stop an ongoing timeout
       * </pre>
       *
       * <code>STOP_TIMEOUT = 3;</code>
       */
      public static final int STOP_TIMEOUT_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Request valueOf(int value) {
        return forNumber(value);
      }

      public static Request forNumber(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return PING;
          case 2: return CHALLENGE_FLAG;
          case 3: return STOP_TIMEOUT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Request>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Request> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Request>() {
              public Request findValueByNumber(int number) {
                return Request.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return proto.gc.SslGcRconRemotecontrol.RemoteControlToController.getDescriptor().getEnumTypes().get(0);
      }

      private static final Request[] VALUES = values();

      public static Request valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Request(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:proto.gc.RemoteControlToController.Request)
    }

    private int bitField0_;
    private int msgCase_ = 0;
    private java.lang.Object msg_;
    public enum MsgCase
        implements com.google.protobuf.Internal.EnumLite {
      REQUEST(2),
      DESIRED_KEEPER(3),
      REQUEST_ROBOT_SUBSTITUTION(4),
      REQUEST_TIMEOUT(5),
      REQUEST_EMERGENCY_STOP(6),
      MSG_NOT_SET(0);
      private final int value;
      private MsgCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MsgCase valueOf(int value) {
        return forNumber(value);
      }

      public static MsgCase forNumber(int value) {
        switch (value) {
          case 2: return REQUEST;
          case 3: return DESIRED_KEEPER;
          case 4: return REQUEST_ROBOT_SUBSTITUTION;
          case 5: return REQUEST_TIMEOUT;
          case 6: return REQUEST_EMERGENCY_STOP;
          case 0: return MSG_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MsgCase
    getMsgCase() {
      return MsgCase.forNumber(
          msgCase_);
    }

    public static final int SIGNATURE_FIELD_NUMBER = 1;
    private proto.gc.SslGcRcon.Signature signature_;
    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 1;</code>
     */
    public boolean hasSignature() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 1;</code>
     */
    public proto.gc.SslGcRcon.Signature getSignature() {
      return signature_ == null ? proto.gc.SslGcRcon.Signature.getDefaultInstance() : signature_;
    }
    /**
     * <pre>
     * signature can optionally be specified to enable secure communication
     * </pre>
     *
     * <code>optional .proto.gc.Signature signature = 1;</code>
     */
    public proto.gc.SslGcRcon.SignatureOrBuilder getSignatureOrBuilder() {
      return signature_ == null ? proto.gc.SslGcRcon.Signature.getDefaultInstance() : signature_;
    }

    public static final int REQUEST_FIELD_NUMBER = 2;
    /**
     * <pre>
     * send a ping to the GC to test if the connection is still open.
     * the value is ignored and a reply is sent back
     * </pre>
     *
     * <code>optional .proto.gc.RemoteControlToController.Request request = 2;</code>
     */
    public boolean hasRequest() {
      return msgCase_ == 2;
    }
    /**
     * <pre>
     * send a ping to the GC to test if the connection is still open.
     * the value is ignored and a reply is sent back
     * </pre>
     *
     * <code>optional .proto.gc.RemoteControlToController.Request request = 2;</code>
     */
    public proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request getRequest() {
      if (msgCase_ == 2) {
        @SuppressWarnings("deprecation")
        proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request result = proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request.valueOf(
            (java.lang.Integer) msg_);
        return result == null ? proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request.UNKNOWN : result;
      }
      return proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request.UNKNOWN;
    }

    public static final int DESIRED_KEEPER_FIELD_NUMBER = 3;
    /**
     * <pre>
     * request a new desired keeper id
     * </pre>
     *
     * <code>optional int32 desired_keeper = 3;</code>
     */
    public boolean hasDesiredKeeper() {
      return msgCase_ == 3;
    }
    /**
     * <pre>
     * request a new desired keeper id
     * </pre>
     *
     * <code>optional int32 desired_keeper = 3;</code>
     */
    public int getDesiredKeeper() {
      if (msgCase_ == 3) {
        return (java.lang.Integer) msg_;
      }
      return 0;
    }

    public static final int REQUEST_ROBOT_SUBSTITUTION_FIELD_NUMBER = 4;
    /**
     * <pre>
     * true: request to substitute a robot at the next possibility
     * false: cancel request
     * </pre>
     *
     * <code>optional bool request_robot_substitution = 4;</code>
     */
    public boolean hasRequestRobotSubstitution() {
      return msgCase_ == 4;
    }
    /**
     * <pre>
     * true: request to substitute a robot at the next possibility
     * false: cancel request
     * </pre>
     *
     * <code>optional bool request_robot_substitution = 4;</code>
     */
    public boolean getRequestRobotSubstitution() {
      if (msgCase_ == 4) {
        return (java.lang.Boolean) msg_;
      }
      return false;
    }

    public static final int REQUEST_TIMEOUT_FIELD_NUMBER = 5;
    /**
     * <pre>
     * true: request a timeout with the next stoppage
     * false: cancel the request
     * </pre>
     *
     * <code>optional bool request_timeout = 5;</code>
     */
    public boolean hasRequestTimeout() {
      return msgCase_ == 5;
    }
    /**
     * <pre>
     * true: request a timeout with the next stoppage
     * false: cancel the request
     * </pre>
     *
     * <code>optional bool request_timeout = 5;</code>
     */
    public boolean getRequestTimeout() {
      if (msgCase_ == 5) {
        return (java.lang.Boolean) msg_;
      }
      return false;
    }

    public static final int REQUEST_EMERGENCY_STOP_FIELD_NUMBER = 6;
    /**
     * <pre>
     * true: initiate an emergency stop
     * false: cancel the request
     * </pre>
     *
     * <code>optional bool request_emergency_stop = 6;</code>
     */
    public boolean hasRequestEmergencyStop() {
      return msgCase_ == 6;
    }
    /**
     * <pre>
     * true: initiate an emergency stop
     * false: cancel the request
     * </pre>
     *
     * <code>optional bool request_emergency_stop = 6;</code>
     */
    public boolean getRequestEmergencyStop() {
      if (msgCase_ == 6) {
        return (java.lang.Boolean) msg_;
      }
      return false;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasSignature()) {
        if (!getSignature().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getSignature());
      }
      if (msgCase_ == 2) {
        output.writeEnum(2, ((java.lang.Integer) msg_));
      }
      if (msgCase_ == 3) {
        output.writeInt32(
            3, (int)((java.lang.Integer) msg_));
      }
      if (msgCase_ == 4) {
        output.writeBool(
            4, (boolean)((java.lang.Boolean) msg_));
      }
      if (msgCase_ == 5) {
        output.writeBool(
            5, (boolean)((java.lang.Boolean) msg_));
      }
      if (msgCase_ == 6) {
        output.writeBool(
            6, (boolean)((java.lang.Boolean) msg_));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getSignature());
      }
      if (msgCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, ((java.lang.Integer) msg_));
      }
      if (msgCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              3, (int)((java.lang.Integer) msg_));
      }
      if (msgCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              4, (boolean)((java.lang.Boolean) msg_));
      }
      if (msgCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              5, (boolean)((java.lang.Boolean) msg_));
      }
      if (msgCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              6, (boolean)((java.lang.Boolean) msg_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof proto.gc.SslGcRconRemotecontrol.RemoteControlToController)) {
        return super.equals(obj);
      }
      proto.gc.SslGcRconRemotecontrol.RemoteControlToController other = (proto.gc.SslGcRconRemotecontrol.RemoteControlToController) obj;

      boolean result = true;
      result = result && (hasSignature() == other.hasSignature());
      if (hasSignature()) {
        result = result && getSignature()
            .equals(other.getSignature());
      }
      result = result && getMsgCase().equals(
          other.getMsgCase());
      if (!result) return false;
      switch (msgCase_) {
        case 2:
          result = result && getRequest()
              .equals(other.getRequest());
          break;
        case 3:
          result = result && (getDesiredKeeper()
              == other.getDesiredKeeper());
          break;
        case 4:
          result = result && (getRequestRobotSubstitution()
              == other.getRequestRobotSubstitution());
          break;
        case 5:
          result = result && (getRequestTimeout()
              == other.getRequestTimeout());
          break;
        case 6:
          result = result && (getRequestEmergencyStop()
              == other.getRequestEmergencyStop());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSignature()) {
        hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
        hash = (53 * hash) + getSignature().hashCode();
      }
      switch (msgCase_) {
        case 2:
          hash = (37 * hash) + REQUEST_FIELD_NUMBER;
          hash = (53 * hash) + getRequest().getNumber();
          break;
        case 3:
          hash = (37 * hash) + DESIRED_KEEPER_FIELD_NUMBER;
          hash = (53 * hash) + getDesiredKeeper();
          break;
        case 4:
          hash = (37 * hash) + REQUEST_ROBOT_SUBSTITUTION_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getRequestRobotSubstitution());
          break;
        case 5:
          hash = (37 * hash) + REQUEST_TIMEOUT_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getRequestTimeout());
          break;
        case 6:
          hash = (37 * hash) + REQUEST_EMERGENCY_STOP_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getRequestEmergencyStop());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(proto.gc.SslGcRconRemotecontrol.RemoteControlToController prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * wrapper for all messages from the remote control to the controller
     * </pre>
     *
     * Protobuf type {@code proto.gc.RemoteControlToController}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.gc.RemoteControlToController)
        proto.gc.SslGcRconRemotecontrol.RemoteControlToControllerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlToController_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlToController_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proto.gc.SslGcRconRemotecontrol.RemoteControlToController.class, proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Builder.class);
      }

      // Construct using proto.gc.SslGcRconRemotecontrol.RemoteControlToController.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSignatureFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (signatureBuilder_ == null) {
          signature_ = null;
        } else {
          signatureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        msgCase_ = 0;
        msg_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlToController_descriptor;
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.RemoteControlToController getDefaultInstanceForType() {
        return proto.gc.SslGcRconRemotecontrol.RemoteControlToController.getDefaultInstance();
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.RemoteControlToController build() {
        proto.gc.SslGcRconRemotecontrol.RemoteControlToController result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.RemoteControlToController buildPartial() {
        proto.gc.SslGcRconRemotecontrol.RemoteControlToController result = new proto.gc.SslGcRconRemotecontrol.RemoteControlToController(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (signatureBuilder_ == null) {
          result.signature_ = signature_;
        } else {
          result.signature_ = signatureBuilder_.build();
        }
        if (msgCase_ == 2) {
          result.msg_ = msg_;
        }
        if (msgCase_ == 3) {
          result.msg_ = msg_;
        }
        if (msgCase_ == 4) {
          result.msg_ = msg_;
        }
        if (msgCase_ == 5) {
          result.msg_ = msg_;
        }
        if (msgCase_ == 6) {
          result.msg_ = msg_;
        }
        result.bitField0_ = to_bitField0_;
        result.msgCase_ = msgCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof proto.gc.SslGcRconRemotecontrol.RemoteControlToController) {
          return mergeFrom((proto.gc.SslGcRconRemotecontrol.RemoteControlToController)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(proto.gc.SslGcRconRemotecontrol.RemoteControlToController other) {
        if (other == proto.gc.SslGcRconRemotecontrol.RemoteControlToController.getDefaultInstance()) return this;
        if (other.hasSignature()) {
          mergeSignature(other.getSignature());
        }
        switch (other.getMsgCase()) {
          case REQUEST: {
            setRequest(other.getRequest());
            break;
          }
          case DESIRED_KEEPER: {
            setDesiredKeeper(other.getDesiredKeeper());
            break;
          }
          case REQUEST_ROBOT_SUBSTITUTION: {
            setRequestRobotSubstitution(other.getRequestRobotSubstitution());
            break;
          }
          case REQUEST_TIMEOUT: {
            setRequestTimeout(other.getRequestTimeout());
            break;
          }
          case REQUEST_EMERGENCY_STOP: {
            setRequestEmergencyStop(other.getRequestEmergencyStop());
            break;
          }
          case MSG_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (hasSignature()) {
          if (!getSignature().isInitialized()) {
            return false;
          }
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        proto.gc.SslGcRconRemotecontrol.RemoteControlToController parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (proto.gc.SslGcRconRemotecontrol.RemoteControlToController) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int msgCase_ = 0;
      private java.lang.Object msg_;
      public MsgCase
          getMsgCase() {
        return MsgCase.forNumber(
            msgCase_);
      }

      public Builder clearMsg() {
        msgCase_ = 0;
        msg_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private proto.gc.SslGcRcon.Signature signature_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          proto.gc.SslGcRcon.Signature, proto.gc.SslGcRcon.Signature.Builder, proto.gc.SslGcRcon.SignatureOrBuilder> signatureBuilder_;
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 1;</code>
       */
      public boolean hasSignature() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 1;</code>
       */
      public proto.gc.SslGcRcon.Signature getSignature() {
        if (signatureBuilder_ == null) {
          return signature_ == null ? proto.gc.SslGcRcon.Signature.getDefaultInstance() : signature_;
        } else {
          return signatureBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 1;</code>
       */
      public Builder setSignature(proto.gc.SslGcRcon.Signature value) {
        if (signatureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          signature_ = value;
          onChanged();
        } else {
          signatureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 1;</code>
       */
      public Builder setSignature(
          proto.gc.SslGcRcon.Signature.Builder builderForValue) {
        if (signatureBuilder_ == null) {
          signature_ = builderForValue.build();
          onChanged();
        } else {
          signatureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 1;</code>
       */
      public Builder mergeSignature(proto.gc.SslGcRcon.Signature value) {
        if (signatureBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              signature_ != null &&
              signature_ != proto.gc.SslGcRcon.Signature.getDefaultInstance()) {
            signature_ =
              proto.gc.SslGcRcon.Signature.newBuilder(signature_).mergeFrom(value).buildPartial();
          } else {
            signature_ = value;
          }
          onChanged();
        } else {
          signatureBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 1;</code>
       */
      public Builder clearSignature() {
        if (signatureBuilder_ == null) {
          signature_ = null;
          onChanged();
        } else {
          signatureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 1;</code>
       */
      public proto.gc.SslGcRcon.Signature.Builder getSignatureBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSignatureFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 1;</code>
       */
      public proto.gc.SslGcRcon.SignatureOrBuilder getSignatureOrBuilder() {
        if (signatureBuilder_ != null) {
          return signatureBuilder_.getMessageOrBuilder();
        } else {
          return signature_ == null ?
              proto.gc.SslGcRcon.Signature.getDefaultInstance() : signature_;
        }
      }
      /**
       * <pre>
       * signature can optionally be specified to enable secure communication
       * </pre>
       *
       * <code>optional .proto.gc.Signature signature = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          proto.gc.SslGcRcon.Signature, proto.gc.SslGcRcon.Signature.Builder, proto.gc.SslGcRcon.SignatureOrBuilder> 
          getSignatureFieldBuilder() {
        if (signatureBuilder_ == null) {
          signatureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              proto.gc.SslGcRcon.Signature, proto.gc.SslGcRcon.Signature.Builder, proto.gc.SslGcRcon.SignatureOrBuilder>(
                  getSignature(),
                  getParentForChildren(),
                  isClean());
          signature_ = null;
        }
        return signatureBuilder_;
      }

      /**
       * <pre>
       * send a ping to the GC to test if the connection is still open.
       * the value is ignored and a reply is sent back
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlToController.Request request = 2;</code>
       */
      public boolean hasRequest() {
        return msgCase_ == 2;
      }
      /**
       * <pre>
       * send a ping to the GC to test if the connection is still open.
       * the value is ignored and a reply is sent back
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlToController.Request request = 2;</code>
       */
      public proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request getRequest() {
        if (msgCase_ == 2) {
          @SuppressWarnings("deprecation")
          proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request result = proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request.valueOf(
              (java.lang.Integer) msg_);
          return result == null ? proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request.UNKNOWN : result;
        }
        return proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request.UNKNOWN;
      }
      /**
       * <pre>
       * send a ping to the GC to test if the connection is still open.
       * the value is ignored and a reply is sent back
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlToController.Request request = 2;</code>
       */
      public Builder setRequest(proto.gc.SslGcRconRemotecontrol.RemoteControlToController.Request value) {
        if (value == null) {
          throw new NullPointerException();
        }
        msgCase_ = 2;
        msg_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * send a ping to the GC to test if the connection is still open.
       * the value is ignored and a reply is sent back
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlToController.Request request = 2;</code>
       */
      public Builder clearRequest() {
        if (msgCase_ == 2) {
          msgCase_ = 0;
          msg_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * request a new desired keeper id
       * </pre>
       *
       * <code>optional int32 desired_keeper = 3;</code>
       */
      public boolean hasDesiredKeeper() {
        return msgCase_ == 3;
      }
      /**
       * <pre>
       * request a new desired keeper id
       * </pre>
       *
       * <code>optional int32 desired_keeper = 3;</code>
       */
      public int getDesiredKeeper() {
        if (msgCase_ == 3) {
          return (java.lang.Integer) msg_;
        }
        return 0;
      }
      /**
       * <pre>
       * request a new desired keeper id
       * </pre>
       *
       * <code>optional int32 desired_keeper = 3;</code>
       */
      public Builder setDesiredKeeper(int value) {
        msgCase_ = 3;
        msg_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * request a new desired keeper id
       * </pre>
       *
       * <code>optional int32 desired_keeper = 3;</code>
       */
      public Builder clearDesiredKeeper() {
        if (msgCase_ == 3) {
          msgCase_ = 0;
          msg_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * true: request to substitute a robot at the next possibility
       * false: cancel request
       * </pre>
       *
       * <code>optional bool request_robot_substitution = 4;</code>
       */
      public boolean hasRequestRobotSubstitution() {
        return msgCase_ == 4;
      }
      /**
       * <pre>
       * true: request to substitute a robot at the next possibility
       * false: cancel request
       * </pre>
       *
       * <code>optional bool request_robot_substitution = 4;</code>
       */
      public boolean getRequestRobotSubstitution() {
        if (msgCase_ == 4) {
          return (java.lang.Boolean) msg_;
        }
        return false;
      }
      /**
       * <pre>
       * true: request to substitute a robot at the next possibility
       * false: cancel request
       * </pre>
       *
       * <code>optional bool request_robot_substitution = 4;</code>
       */
      public Builder setRequestRobotSubstitution(boolean value) {
        msgCase_ = 4;
        msg_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * true: request to substitute a robot at the next possibility
       * false: cancel request
       * </pre>
       *
       * <code>optional bool request_robot_substitution = 4;</code>
       */
      public Builder clearRequestRobotSubstitution() {
        if (msgCase_ == 4) {
          msgCase_ = 0;
          msg_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * true: request a timeout with the next stoppage
       * false: cancel the request
       * </pre>
       *
       * <code>optional bool request_timeout = 5;</code>
       */
      public boolean hasRequestTimeout() {
        return msgCase_ == 5;
      }
      /**
       * <pre>
       * true: request a timeout with the next stoppage
       * false: cancel the request
       * </pre>
       *
       * <code>optional bool request_timeout = 5;</code>
       */
      public boolean getRequestTimeout() {
        if (msgCase_ == 5) {
          return (java.lang.Boolean) msg_;
        }
        return false;
      }
      /**
       * <pre>
       * true: request a timeout with the next stoppage
       * false: cancel the request
       * </pre>
       *
       * <code>optional bool request_timeout = 5;</code>
       */
      public Builder setRequestTimeout(boolean value) {
        msgCase_ = 5;
        msg_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * true: request a timeout with the next stoppage
       * false: cancel the request
       * </pre>
       *
       * <code>optional bool request_timeout = 5;</code>
       */
      public Builder clearRequestTimeout() {
        if (msgCase_ == 5) {
          msgCase_ = 0;
          msg_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * true: initiate an emergency stop
       * false: cancel the request
       * </pre>
       *
       * <code>optional bool request_emergency_stop = 6;</code>
       */
      public boolean hasRequestEmergencyStop() {
        return msgCase_ == 6;
      }
      /**
       * <pre>
       * true: initiate an emergency stop
       * false: cancel the request
       * </pre>
       *
       * <code>optional bool request_emergency_stop = 6;</code>
       */
      public boolean getRequestEmergencyStop() {
        if (msgCase_ == 6) {
          return (java.lang.Boolean) msg_;
        }
        return false;
      }
      /**
       * <pre>
       * true: initiate an emergency stop
       * false: cancel the request
       * </pre>
       *
       * <code>optional bool request_emergency_stop = 6;</code>
       */
      public Builder setRequestEmergencyStop(boolean value) {
        msgCase_ = 6;
        msg_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * true: initiate an emergency stop
       * false: cancel the request
       * </pre>
       *
       * <code>optional bool request_emergency_stop = 6;</code>
       */
      public Builder clearRequestEmergencyStop() {
        if (msgCase_ == 6) {
          msgCase_ = 0;
          msg_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:proto.gc.RemoteControlToController)
    }

    // @@protoc_insertion_point(class_scope:proto.gc.RemoteControlToController)
    private static final proto.gc.SslGcRconRemotecontrol.RemoteControlToController DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new proto.gc.SslGcRconRemotecontrol.RemoteControlToController();
    }

    public static proto.gc.SslGcRconRemotecontrol.RemoteControlToController getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<RemoteControlToController>
        PARSER = new com.google.protobuf.AbstractParser<RemoteControlToController>() {
      @java.lang.Override
      public RemoteControlToController parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RemoteControlToController(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RemoteControlToController> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RemoteControlToController> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public proto.gc.SslGcRconRemotecontrol.RemoteControlToController getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ControllerToRemoteControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.gc.ControllerToRemoteControl)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * a reply from the controller
     * </pre>
     *
     * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
     */
    boolean hasControllerReply();
    /**
     * <pre>
     * a reply from the controller
     * </pre>
     *
     * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
     */
    proto.gc.SslGcRcon.ControllerReply getControllerReply();
    /**
     * <pre>
     * a reply from the controller
     * </pre>
     *
     * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
     */
    proto.gc.SslGcRcon.ControllerReplyOrBuilder getControllerReplyOrBuilder();

    /**
     * <pre>
     * current team state
     * </pre>
     *
     * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
     */
    boolean hasState();
    /**
     * <pre>
     * current team state
     * </pre>
     *
     * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
     */
    proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState getState();
    /**
     * <pre>
     * current team state
     * </pre>
     *
     * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
     */
    proto.gc.SslGcRconRemotecontrol.RemoteControlTeamStateOrBuilder getStateOrBuilder();
  }
  /**
   * <pre>
   * wrapper for all messages from controller to a team's computer
   * </pre>
   *
   * Protobuf type {@code proto.gc.ControllerToRemoteControl}
   */
  public  static final class ControllerToRemoteControl extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:proto.gc.ControllerToRemoteControl)
      ControllerToRemoteControlOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ControllerToRemoteControl.newBuilder() to construct.
    private ControllerToRemoteControl(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ControllerToRemoteControl() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ControllerToRemoteControl(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              proto.gc.SslGcRcon.ControllerReply.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = controllerReply_.toBuilder();
              }
              controllerReply_ = input.readMessage(proto.gc.SslGcRcon.ControllerReply.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(controllerReply_);
                controllerReply_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = state_.toBuilder();
              }
              state_ = input.readMessage(proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(state_);
                state_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_ControllerToRemoteControl_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_ControllerToRemoteControl_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl.class, proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl.Builder.class);
    }

    private int bitField0_;
    public static final int CONTROLLER_REPLY_FIELD_NUMBER = 1;
    private proto.gc.SslGcRcon.ControllerReply controllerReply_;
    /**
     * <pre>
     * a reply from the controller
     * </pre>
     *
     * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
     */
    public boolean hasControllerReply() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * a reply from the controller
     * </pre>
     *
     * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
     */
    public proto.gc.SslGcRcon.ControllerReply getControllerReply() {
      return controllerReply_ == null ? proto.gc.SslGcRcon.ControllerReply.getDefaultInstance() : controllerReply_;
    }
    /**
     * <pre>
     * a reply from the controller
     * </pre>
     *
     * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
     */
    public proto.gc.SslGcRcon.ControllerReplyOrBuilder getControllerReplyOrBuilder() {
      return controllerReply_ == null ? proto.gc.SslGcRcon.ControllerReply.getDefaultInstance() : controllerReply_;
    }

    public static final int STATE_FIELD_NUMBER = 2;
    private proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState state_;
    /**
     * <pre>
     * current team state
     * </pre>
     *
     * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * current team state
     * </pre>
     *
     * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
     */
    public proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState getState() {
      return state_ == null ? proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.getDefaultInstance() : state_;
    }
    /**
     * <pre>
     * current team state
     * </pre>
     *
     * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
     */
    public proto.gc.SslGcRconRemotecontrol.RemoteControlTeamStateOrBuilder getStateOrBuilder() {
      return state_ == null ? proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.getDefaultInstance() : state_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getControllerReply());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, getState());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getControllerReply());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getState());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl)) {
        return super.equals(obj);
      }
      proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl other = (proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl) obj;

      boolean result = true;
      result = result && (hasControllerReply() == other.hasControllerReply());
      if (hasControllerReply()) {
        result = result && getControllerReply()
            .equals(other.getControllerReply());
      }
      result = result && (hasState() == other.hasState());
      if (hasState()) {
        result = result && getState()
            .equals(other.getState());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasControllerReply()) {
        hash = (37 * hash) + CONTROLLER_REPLY_FIELD_NUMBER;
        hash = (53 * hash) + getControllerReply().hashCode();
      }
      if (hasState()) {
        hash = (37 * hash) + STATE_FIELD_NUMBER;
        hash = (53 * hash) + getState().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * wrapper for all messages from controller to a team's computer
     * </pre>
     *
     * Protobuf type {@code proto.gc.ControllerToRemoteControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.gc.ControllerToRemoteControl)
        proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControlOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_ControllerToRemoteControl_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_ControllerToRemoteControl_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl.class, proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl.Builder.class);
      }

      // Construct using proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getControllerReplyFieldBuilder();
          getStateFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (controllerReplyBuilder_ == null) {
          controllerReply_ = null;
        } else {
          controllerReplyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (stateBuilder_ == null) {
          state_ = null;
        } else {
          stateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_ControllerToRemoteControl_descriptor;
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl getDefaultInstanceForType() {
        return proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl.getDefaultInstance();
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl build() {
        proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl buildPartial() {
        proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl result = new proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (controllerReplyBuilder_ == null) {
          result.controllerReply_ = controllerReply_;
        } else {
          result.controllerReply_ = controllerReplyBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (stateBuilder_ == null) {
          result.state_ = state_;
        } else {
          result.state_ = stateBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl) {
          return mergeFrom((proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl other) {
        if (other == proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl.getDefaultInstance()) return this;
        if (other.hasControllerReply()) {
          mergeControllerReply(other.getControllerReply());
        }
        if (other.hasState()) {
          mergeState(other.getState());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private proto.gc.SslGcRcon.ControllerReply controllerReply_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          proto.gc.SslGcRcon.ControllerReply, proto.gc.SslGcRcon.ControllerReply.Builder, proto.gc.SslGcRcon.ControllerReplyOrBuilder> controllerReplyBuilder_;
      /**
       * <pre>
       * a reply from the controller
       * </pre>
       *
       * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
       */
      public boolean hasControllerReply() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * a reply from the controller
       * </pre>
       *
       * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
       */
      public proto.gc.SslGcRcon.ControllerReply getControllerReply() {
        if (controllerReplyBuilder_ == null) {
          return controllerReply_ == null ? proto.gc.SslGcRcon.ControllerReply.getDefaultInstance() : controllerReply_;
        } else {
          return controllerReplyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * a reply from the controller
       * </pre>
       *
       * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
       */
      public Builder setControllerReply(proto.gc.SslGcRcon.ControllerReply value) {
        if (controllerReplyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          controllerReply_ = value;
          onChanged();
        } else {
          controllerReplyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * a reply from the controller
       * </pre>
       *
       * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
       */
      public Builder setControllerReply(
          proto.gc.SslGcRcon.ControllerReply.Builder builderForValue) {
        if (controllerReplyBuilder_ == null) {
          controllerReply_ = builderForValue.build();
          onChanged();
        } else {
          controllerReplyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * a reply from the controller
       * </pre>
       *
       * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
       */
      public Builder mergeControllerReply(proto.gc.SslGcRcon.ControllerReply value) {
        if (controllerReplyBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              controllerReply_ != null &&
              controllerReply_ != proto.gc.SslGcRcon.ControllerReply.getDefaultInstance()) {
            controllerReply_ =
              proto.gc.SslGcRcon.ControllerReply.newBuilder(controllerReply_).mergeFrom(value).buildPartial();
          } else {
            controllerReply_ = value;
          }
          onChanged();
        } else {
          controllerReplyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * a reply from the controller
       * </pre>
       *
       * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
       */
      public Builder clearControllerReply() {
        if (controllerReplyBuilder_ == null) {
          controllerReply_ = null;
          onChanged();
        } else {
          controllerReplyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * a reply from the controller
       * </pre>
       *
       * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
       */
      public proto.gc.SslGcRcon.ControllerReply.Builder getControllerReplyBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getControllerReplyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * a reply from the controller
       * </pre>
       *
       * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
       */
      public proto.gc.SslGcRcon.ControllerReplyOrBuilder getControllerReplyOrBuilder() {
        if (controllerReplyBuilder_ != null) {
          return controllerReplyBuilder_.getMessageOrBuilder();
        } else {
          return controllerReply_ == null ?
              proto.gc.SslGcRcon.ControllerReply.getDefaultInstance() : controllerReply_;
        }
      }
      /**
       * <pre>
       * a reply from the controller
       * </pre>
       *
       * <code>optional .proto.gc.ControllerReply controller_reply = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          proto.gc.SslGcRcon.ControllerReply, proto.gc.SslGcRcon.ControllerReply.Builder, proto.gc.SslGcRcon.ControllerReplyOrBuilder> 
          getControllerReplyFieldBuilder() {
        if (controllerReplyBuilder_ == null) {
          controllerReplyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              proto.gc.SslGcRcon.ControllerReply, proto.gc.SslGcRcon.ControllerReply.Builder, proto.gc.SslGcRcon.ControllerReplyOrBuilder>(
                  getControllerReply(),
                  getParentForChildren(),
                  isClean());
          controllerReply_ = null;
        }
        return controllerReplyBuilder_;
      }

      private proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState state_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState, proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.Builder, proto.gc.SslGcRconRemotecontrol.RemoteControlTeamStateOrBuilder> stateBuilder_;
      /**
       * <pre>
       * current team state
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * current team state
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
       */
      public proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState getState() {
        if (stateBuilder_ == null) {
          return state_ == null ? proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.getDefaultInstance() : state_;
        } else {
          return stateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * current team state
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
       */
      public Builder setState(proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState value) {
        if (stateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          state_ = value;
          onChanged();
        } else {
          stateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * current team state
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
       */
      public Builder setState(
          proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.Builder builderForValue) {
        if (stateBuilder_ == null) {
          state_ = builderForValue.build();
          onChanged();
        } else {
          stateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * current team state
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
       */
      public Builder mergeState(proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState value) {
        if (stateBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              state_ != null &&
              state_ != proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.getDefaultInstance()) {
            state_ =
              proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.newBuilder(state_).mergeFrom(value).buildPartial();
          } else {
            state_ = value;
          }
          onChanged();
        } else {
          stateBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * current team state
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
       */
      public Builder clearState() {
        if (stateBuilder_ == null) {
          state_ = null;
          onChanged();
        } else {
          stateBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * current team state
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
       */
      public proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.Builder getStateBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getStateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * current team state
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
       */
      public proto.gc.SslGcRconRemotecontrol.RemoteControlTeamStateOrBuilder getStateOrBuilder() {
        if (stateBuilder_ != null) {
          return stateBuilder_.getMessageOrBuilder();
        } else {
          return state_ == null ?
              proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.getDefaultInstance() : state_;
        }
      }
      /**
       * <pre>
       * current team state
       * </pre>
       *
       * <code>optional .proto.gc.RemoteControlTeamState state = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState, proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.Builder, proto.gc.SslGcRconRemotecontrol.RemoteControlTeamStateOrBuilder> 
          getStateFieldBuilder() {
        if (stateBuilder_ == null) {
          stateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState, proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.Builder, proto.gc.SslGcRconRemotecontrol.RemoteControlTeamStateOrBuilder>(
                  getState(),
                  getParentForChildren(),
                  isClean());
          state_ = null;
        }
        return stateBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:proto.gc.ControllerToRemoteControl)
    }

    // @@protoc_insertion_point(class_scope:proto.gc.ControllerToRemoteControl)
    private static final proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl();
    }

    public static proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<ControllerToRemoteControl>
        PARSER = new com.google.protobuf.AbstractParser<ControllerToRemoteControl>() {
      @java.lang.Override
      public ControllerToRemoteControl parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ControllerToRemoteControl(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ControllerToRemoteControl> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ControllerToRemoteControl> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public proto.gc.SslGcRconRemotecontrol.ControllerToRemoteControl getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RemoteControlTeamStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.gc.RemoteControlTeamState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * the team that is controlled
     * </pre>
     *
     * <code>optional .proto.simulation.Team team = 12;</code>
     */
    boolean hasTeam();
    /**
     * <pre>
     * the team that is controlled
     * </pre>
     *
     * <code>optional .proto.simulation.Team team = 12;</code>
     */
    proto.simulation.SslGcCommon.Team getTeam();

    /**
     * <pre>
     * list of all currently available request types that can be made
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
     */
    java.util.List<proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType> getAvailableRequestsList();
    /**
     * <pre>
     * list of all currently available request types that can be made
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
     */
    int getAvailableRequestsCount();
    /**
     * <pre>
     * list of all currently available request types that can be made
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
     */
    proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType getAvailableRequests(int index);

    /**
     * <pre>
     * list of all currently active request types that are pending
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
     */
    java.util.List<proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType> getActiveRequestsList();
    /**
     * <pre>
     * list of all currently active request types that are pending
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
     */
    int getActiveRequestsCount();
    /**
     * <pre>
     * list of all currently active request types that are pending
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
     */
    proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType getActiveRequests(int index);

    /**
     * <pre>
     * currently set keeper id
     * </pre>
     *
     * <code>optional int32 keeper_id = 3;</code>
     */
    boolean hasKeeperId();
    /**
     * <pre>
     * currently set keeper id
     * </pre>
     *
     * <code>optional int32 keeper_id = 3;</code>
     */
    int getKeeperId();

    /**
     * <pre>
     * number of seconds till emergency stop is executed
     * zero, if no emergency stop requested
     * </pre>
     *
     * <code>optional float emergency_stop_in = 4;</code>
     */
    boolean hasEmergencyStopIn();
    /**
     * <pre>
     * number of seconds till emergency stop is executed
     * zero, if no emergency stop requested
     * </pre>
     *
     * <code>optional float emergency_stop_in = 4;</code>
     */
    float getEmergencyStopIn();

    /**
     * <pre>
     * number of timeouts left for the team
     * </pre>
     *
     * <code>optional int32 timeouts_left = 5;</code>
     */
    boolean hasTimeoutsLeft();
    /**
     * <pre>
     * number of timeouts left for the team
     * </pre>
     *
     * <code>optional int32 timeouts_left = 5;</code>
     */
    int getTimeoutsLeft();

    /**
     * <pre>
     * number of seconds left for timeout for the team
     * </pre>
     *
     * <code>optional float timeout_time_left = 10;</code>
     */
    boolean hasTimeoutTimeLeft();
    /**
     * <pre>
     * number of seconds left for timeout for the team
     * </pre>
     *
     * <code>optional float timeout_time_left = 10;</code>
     */
    float getTimeoutTimeLeft();

    /**
     * <pre>
     * number of challenge flags left for the team
     * </pre>
     *
     * <code>optional int32 challenge_flags_left = 6;</code>
     */
    boolean hasChallengeFlagsLeft();
    /**
     * <pre>
     * number of challenge flags left for the team
     * </pre>
     *
     * <code>optional int32 challenge_flags_left = 6;</code>
     */
    int getChallengeFlagsLeft();

    /**
     * <pre>
     * max number of robots currently allowed
     * </pre>
     *
     * <code>optional int32 max_robots = 7;</code>
     */
    boolean hasMaxRobots();
    /**
     * <pre>
     * max number of robots currently allowed
     * </pre>
     *
     * <code>optional int32 max_robots = 7;</code>
     */
    int getMaxRobots();

    /**
     * <pre>
     * current number of robots visible on field
     * </pre>
     *
     * <code>optional int32 robots_on_field = 9;</code>
     */
    boolean hasRobotsOnField();
    /**
     * <pre>
     * current number of robots visible on field
     * </pre>
     *
     * <code>optional int32 robots_on_field = 9;</code>
     */
    int getRobotsOnField();

    /**
     * <pre>
     * list of due times for each active yellow card (in seconds)
     * </pre>
     *
     * <code>repeated float yellow_cards_due = 8;</code>
     */
    java.util.List<java.lang.Float> getYellowCardsDueList();
    /**
     * <pre>
     * list of due times for each active yellow card (in seconds)
     * </pre>
     *
     * <code>repeated float yellow_cards_due = 8;</code>
     */
    int getYellowCardsDueCount();
    /**
     * <pre>
     * list of due times for each active yellow card (in seconds)
     * </pre>
     *
     * <code>repeated float yellow_cards_due = 8;</code>
     */
    float getYellowCardsDue(int index);

    /**
     * <pre>
     * if true, team is allowed to substitute robots
     * </pre>
     *
     * <code>optional bool can_substitute_robot = 11;</code>
     */
    boolean hasCanSubstituteRobot();
    /**
     * <pre>
     * if true, team is allowed to substitute robots
     * </pre>
     *
     * <code>optional bool can_substitute_robot = 11;</code>
     */
    boolean getCanSubstituteRobot();
  }
  /**
   * <pre>
   * Current team state from Controller for remote control
   * </pre>
   *
   * Protobuf type {@code proto.gc.RemoteControlTeamState}
   */
  public  static final class RemoteControlTeamState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:proto.gc.RemoteControlTeamState)
      RemoteControlTeamStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RemoteControlTeamState.newBuilder() to construct.
    private RemoteControlTeamState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RemoteControlTeamState() {
      team_ = 0;
      availableRequests_ = java.util.Collections.emptyList();
      activeRequests_ = java.util.Collections.emptyList();
      keeperId_ = 0;
      emergencyStopIn_ = 0F;
      timeoutsLeft_ = 0;
      timeoutTimeLeft_ = 0F;
      challengeFlagsLeft_ = 0;
      maxRobots_ = 0;
      robotsOnField_ = 0;
      yellowCardsDue_ = java.util.Collections.emptyList();
      canSubstituteRobot_ = false;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RemoteControlTeamState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
              proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType value = proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  availableRequests_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                availableRequests_.add(rawValue);
              }
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
                proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType value = proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    availableRequests_ = new java.util.ArrayList<java.lang.Integer>();
                    mutable_bitField0_ |= 0x00000002;
                  }
                  availableRequests_.add(rawValue);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              @SuppressWarnings("deprecation")
              proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType value = proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  activeRequests_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000004;
                }
                activeRequests_.add(rawValue);
              }
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
                proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType value = proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(2, rawValue);
                } else {
                  if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    activeRequests_ = new java.util.ArrayList<java.lang.Integer>();
                    mutable_bitField0_ |= 0x00000004;
                  }
                  activeRequests_.add(rawValue);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              keeperId_ = input.readInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000004;
              emergencyStopIn_ = input.readFloat();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              timeoutsLeft_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              challengeFlagsLeft_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              maxRobots_ = input.readInt32();
              break;
            }
            case 69: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                yellowCardsDue_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000400;
              }
              yellowCardsDue_.add(input.readFloat());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                yellowCardsDue_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                yellowCardsDue_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              robotsOnField_ = input.readInt32();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000010;
              timeoutTimeLeft_ = input.readFloat();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000100;
              canSubstituteRobot_ = input.readBool();
              break;
            }
            case 96: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              proto.simulation.SslGcCommon.Team value = proto.simulation.SslGcCommon.Team.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(12, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                team_ = rawValue;
              }
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          availableRequests_ = java.util.Collections.unmodifiableList(availableRequests_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          activeRequests_ = java.util.Collections.unmodifiableList(activeRequests_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          yellowCardsDue_ = java.util.Collections.unmodifiableList(yellowCardsDue_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlTeamState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlTeamState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.class, proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.Builder.class);
    }

    private int bitField0_;
    public static final int TEAM_FIELD_NUMBER = 12;
    private int team_;
    /**
     * <pre>
     * the team that is controlled
     * </pre>
     *
     * <code>optional .proto.simulation.Team team = 12;</code>
     */
    public boolean hasTeam() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * the team that is controlled
     * </pre>
     *
     * <code>optional .proto.simulation.Team team = 12;</code>
     */
    public proto.simulation.SslGcCommon.Team getTeam() {
      @SuppressWarnings("deprecation")
      proto.simulation.SslGcCommon.Team result = proto.simulation.SslGcCommon.Team.valueOf(team_);
      return result == null ? proto.simulation.SslGcCommon.Team.UNKNOWN : result;
    }

    public static final int AVAILABLE_REQUESTS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> availableRequests_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType> availableRequests_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType>() {
              public proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType result = proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType.valueOf(from);
                return result == null ? proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType.UNKNOWN_REQUEST_TYPE : result;
              }
            };
    /**
     * <pre>
     * list of all currently available request types that can be made
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
     */
    public java.util.List<proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType> getAvailableRequestsList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType>(availableRequests_, availableRequests_converter_);
    }
    /**
     * <pre>
     * list of all currently available request types that can be made
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
     */
    public int getAvailableRequestsCount() {
      return availableRequests_.size();
    }
    /**
     * <pre>
     * list of all currently available request types that can be made
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
     */
    public proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType getAvailableRequests(int index) {
      return availableRequests_converter_.convert(availableRequests_.get(index));
    }

    public static final int ACTIVE_REQUESTS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> activeRequests_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType> activeRequests_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType>() {
              public proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType result = proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType.valueOf(from);
                return result == null ? proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType.UNKNOWN_REQUEST_TYPE : result;
              }
            };
    /**
     * <pre>
     * list of all currently active request types that are pending
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
     */
    public java.util.List<proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType> getActiveRequestsList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType>(activeRequests_, activeRequests_converter_);
    }
    /**
     * <pre>
     * list of all currently active request types that are pending
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
     */
    public int getActiveRequestsCount() {
      return activeRequests_.size();
    }
    /**
     * <pre>
     * list of all currently active request types that are pending
     * </pre>
     *
     * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
     */
    public proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType getActiveRequests(int index) {
      return activeRequests_converter_.convert(activeRequests_.get(index));
    }

    public static final int KEEPER_ID_FIELD_NUMBER = 3;
    private int keeperId_;
    /**
     * <pre>
     * currently set keeper id
     * </pre>
     *
     * <code>optional int32 keeper_id = 3;</code>
     */
    public boolean hasKeeperId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * currently set keeper id
     * </pre>
     *
     * <code>optional int32 keeper_id = 3;</code>
     */
    public int getKeeperId() {
      return keeperId_;
    }

    public static final int EMERGENCY_STOP_IN_FIELD_NUMBER = 4;
    private float emergencyStopIn_;
    /**
     * <pre>
     * number of seconds till emergency stop is executed
     * zero, if no emergency stop requested
     * </pre>
     *
     * <code>optional float emergency_stop_in = 4;</code>
     */
    public boolean hasEmergencyStopIn() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * number of seconds till emergency stop is executed
     * zero, if no emergency stop requested
     * </pre>
     *
     * <code>optional float emergency_stop_in = 4;</code>
     */
    public float getEmergencyStopIn() {
      return emergencyStopIn_;
    }

    public static final int TIMEOUTS_LEFT_FIELD_NUMBER = 5;
    private int timeoutsLeft_;
    /**
     * <pre>
     * number of timeouts left for the team
     * </pre>
     *
     * <code>optional int32 timeouts_left = 5;</code>
     */
    public boolean hasTimeoutsLeft() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * number of timeouts left for the team
     * </pre>
     *
     * <code>optional int32 timeouts_left = 5;</code>
     */
    public int getTimeoutsLeft() {
      return timeoutsLeft_;
    }

    public static final int TIMEOUT_TIME_LEFT_FIELD_NUMBER = 10;
    private float timeoutTimeLeft_;
    /**
     * <pre>
     * number of seconds left for timeout for the team
     * </pre>
     *
     * <code>optional float timeout_time_left = 10;</code>
     */
    public boolean hasTimeoutTimeLeft() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * number of seconds left for timeout for the team
     * </pre>
     *
     * <code>optional float timeout_time_left = 10;</code>
     */
    public float getTimeoutTimeLeft() {
      return timeoutTimeLeft_;
    }

    public static final int CHALLENGE_FLAGS_LEFT_FIELD_NUMBER = 6;
    private int challengeFlagsLeft_;
    /**
     * <pre>
     * number of challenge flags left for the team
     * </pre>
     *
     * <code>optional int32 challenge_flags_left = 6;</code>
     */
    public boolean hasChallengeFlagsLeft() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * number of challenge flags left for the team
     * </pre>
     *
     * <code>optional int32 challenge_flags_left = 6;</code>
     */
    public int getChallengeFlagsLeft() {
      return challengeFlagsLeft_;
    }

    public static final int MAX_ROBOTS_FIELD_NUMBER = 7;
    private int maxRobots_;
    /**
     * <pre>
     * max number of robots currently allowed
     * </pre>
     *
     * <code>optional int32 max_robots = 7;</code>
     */
    public boolean hasMaxRobots() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * max number of robots currently allowed
     * </pre>
     *
     * <code>optional int32 max_robots = 7;</code>
     */
    public int getMaxRobots() {
      return maxRobots_;
    }

    public static final int ROBOTS_ON_FIELD_FIELD_NUMBER = 9;
    private int robotsOnField_;
    /**
     * <pre>
     * current number of robots visible on field
     * </pre>
     *
     * <code>optional int32 robots_on_field = 9;</code>
     */
    public boolean hasRobotsOnField() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * current number of robots visible on field
     * </pre>
     *
     * <code>optional int32 robots_on_field = 9;</code>
     */
    public int getRobotsOnField() {
      return robotsOnField_;
    }

    public static final int YELLOW_CARDS_DUE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Float> yellowCardsDue_;
    /**
     * <pre>
     * list of due times for each active yellow card (in seconds)
     * </pre>
     *
     * <code>repeated float yellow_cards_due = 8;</code>
     */
    public java.util.List<java.lang.Float>
        getYellowCardsDueList() {
      return yellowCardsDue_;
    }
    /**
     * <pre>
     * list of due times for each active yellow card (in seconds)
     * </pre>
     *
     * <code>repeated float yellow_cards_due = 8;</code>
     */
    public int getYellowCardsDueCount() {
      return yellowCardsDue_.size();
    }
    /**
     * <pre>
     * list of due times for each active yellow card (in seconds)
     * </pre>
     *
     * <code>repeated float yellow_cards_due = 8;</code>
     */
    public float getYellowCardsDue(int index) {
      return yellowCardsDue_.get(index);
    }

    public static final int CAN_SUBSTITUTE_ROBOT_FIELD_NUMBER = 11;
    private boolean canSubstituteRobot_;
    /**
     * <pre>
     * if true, team is allowed to substitute robots
     * </pre>
     *
     * <code>optional bool can_substitute_robot = 11;</code>
     */
    public boolean hasCanSubstituteRobot() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * if true, team is allowed to substitute robots
     * </pre>
     *
     * <code>optional bool can_substitute_robot = 11;</code>
     */
    public boolean getCanSubstituteRobot() {
      return canSubstituteRobot_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < availableRequests_.size(); i++) {
        output.writeEnum(1, availableRequests_.get(i));
      }
      for (int i = 0; i < activeRequests_.size(); i++) {
        output.writeEnum(2, activeRequests_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, keeperId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(4, emergencyStopIn_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, timeoutsLeft_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, challengeFlagsLeft_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, maxRobots_);
      }
      for (int i = 0; i < yellowCardsDue_.size(); i++) {
        output.writeFloat(8, yellowCardsDue_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(9, robotsOnField_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(10, timeoutTimeLeft_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(11, canSubstituteRobot_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(12, team_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < availableRequests_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(availableRequests_.get(i));
        }
        size += dataSize;
        size += 1 * availableRequests_.size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < activeRequests_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(activeRequests_.get(i));
        }
        size += dataSize;
        size += 1 * activeRequests_.size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, keeperId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, emergencyStopIn_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, timeoutsLeft_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, challengeFlagsLeft_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, maxRobots_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getYellowCardsDueList().size();
        size += dataSize;
        size += 1 * getYellowCardsDueList().size();
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, robotsOnField_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, timeoutTimeLeft_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, canSubstituteRobot_);
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, team_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState)) {
        return super.equals(obj);
      }
      proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState other = (proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState) obj;

      boolean result = true;
      result = result && (hasTeam() == other.hasTeam());
      if (hasTeam()) {
        result = result && team_ == other.team_;
      }
      result = result && availableRequests_.equals(other.availableRequests_);
      result = result && activeRequests_.equals(other.activeRequests_);
      result = result && (hasKeeperId() == other.hasKeeperId());
      if (hasKeeperId()) {
        result = result && (getKeeperId()
            == other.getKeeperId());
      }
      result = result && (hasEmergencyStopIn() == other.hasEmergencyStopIn());
      if (hasEmergencyStopIn()) {
        result = result && (
            java.lang.Float.floatToIntBits(getEmergencyStopIn())
            == java.lang.Float.floatToIntBits(
                other.getEmergencyStopIn()));
      }
      result = result && (hasTimeoutsLeft() == other.hasTimeoutsLeft());
      if (hasTimeoutsLeft()) {
        result = result && (getTimeoutsLeft()
            == other.getTimeoutsLeft());
      }
      result = result && (hasTimeoutTimeLeft() == other.hasTimeoutTimeLeft());
      if (hasTimeoutTimeLeft()) {
        result = result && (
            java.lang.Float.floatToIntBits(getTimeoutTimeLeft())
            == java.lang.Float.floatToIntBits(
                other.getTimeoutTimeLeft()));
      }
      result = result && (hasChallengeFlagsLeft() == other.hasChallengeFlagsLeft());
      if (hasChallengeFlagsLeft()) {
        result = result && (getChallengeFlagsLeft()
            == other.getChallengeFlagsLeft());
      }
      result = result && (hasMaxRobots() == other.hasMaxRobots());
      if (hasMaxRobots()) {
        result = result && (getMaxRobots()
            == other.getMaxRobots());
      }
      result = result && (hasRobotsOnField() == other.hasRobotsOnField());
      if (hasRobotsOnField()) {
        result = result && (getRobotsOnField()
            == other.getRobotsOnField());
      }
      result = result && getYellowCardsDueList()
          .equals(other.getYellowCardsDueList());
      result = result && (hasCanSubstituteRobot() == other.hasCanSubstituteRobot());
      if (hasCanSubstituteRobot()) {
        result = result && (getCanSubstituteRobot()
            == other.getCanSubstituteRobot());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTeam()) {
        hash = (37 * hash) + TEAM_FIELD_NUMBER;
        hash = (53 * hash) + team_;
      }
      if (getAvailableRequestsCount() > 0) {
        hash = (37 * hash) + AVAILABLE_REQUESTS_FIELD_NUMBER;
        hash = (53 * hash) + availableRequests_.hashCode();
      }
      if (getActiveRequestsCount() > 0) {
        hash = (37 * hash) + ACTIVE_REQUESTS_FIELD_NUMBER;
        hash = (53 * hash) + activeRequests_.hashCode();
      }
      if (hasKeeperId()) {
        hash = (37 * hash) + KEEPER_ID_FIELD_NUMBER;
        hash = (53 * hash) + getKeeperId();
      }
      if (hasEmergencyStopIn()) {
        hash = (37 * hash) + EMERGENCY_STOP_IN_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getEmergencyStopIn());
      }
      if (hasTimeoutsLeft()) {
        hash = (37 * hash) + TIMEOUTS_LEFT_FIELD_NUMBER;
        hash = (53 * hash) + getTimeoutsLeft();
      }
      if (hasTimeoutTimeLeft()) {
        hash = (37 * hash) + TIMEOUT_TIME_LEFT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTimeoutTimeLeft());
      }
      if (hasChallengeFlagsLeft()) {
        hash = (37 * hash) + CHALLENGE_FLAGS_LEFT_FIELD_NUMBER;
        hash = (53 * hash) + getChallengeFlagsLeft();
      }
      if (hasMaxRobots()) {
        hash = (37 * hash) + MAX_ROBOTS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxRobots();
      }
      if (hasRobotsOnField()) {
        hash = (37 * hash) + ROBOTS_ON_FIELD_FIELD_NUMBER;
        hash = (53 * hash) + getRobotsOnField();
      }
      if (getYellowCardsDueCount() > 0) {
        hash = (37 * hash) + YELLOW_CARDS_DUE_FIELD_NUMBER;
        hash = (53 * hash) + getYellowCardsDueList().hashCode();
      }
      if (hasCanSubstituteRobot()) {
        hash = (37 * hash) + CAN_SUBSTITUTE_ROBOT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getCanSubstituteRobot());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Current team state from Controller for remote control
     * </pre>
     *
     * Protobuf type {@code proto.gc.RemoteControlTeamState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.gc.RemoteControlTeamState)
        proto.gc.SslGcRconRemotecontrol.RemoteControlTeamStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlTeamState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlTeamState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.class, proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.Builder.class);
      }

      // Construct using proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        team_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        availableRequests_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        activeRequests_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        keeperId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        emergencyStopIn_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        timeoutsLeft_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        timeoutTimeLeft_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        challengeFlagsLeft_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        maxRobots_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        robotsOnField_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        yellowCardsDue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        canSubstituteRobot_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return proto.gc.SslGcRconRemotecontrol.internal_static_proto_gc_RemoteControlTeamState_descriptor;
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState getDefaultInstanceForType() {
        return proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.getDefaultInstance();
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState build() {
        proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState buildPartial() {
        proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState result = new proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.team_ = team_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          availableRequests_ = java.util.Collections.unmodifiableList(availableRequests_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.availableRequests_ = availableRequests_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          activeRequests_ = java.util.Collections.unmodifiableList(activeRequests_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.activeRequests_ = activeRequests_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.keeperId_ = keeperId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000004;
        }
        result.emergencyStopIn_ = emergencyStopIn_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000008;
        }
        result.timeoutsLeft_ = timeoutsLeft_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.timeoutTimeLeft_ = timeoutTimeLeft_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.challengeFlagsLeft_ = challengeFlagsLeft_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.maxRobots_ = maxRobots_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.robotsOnField_ = robotsOnField_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          yellowCardsDue_ = java.util.Collections.unmodifiableList(yellowCardsDue_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.yellowCardsDue_ = yellowCardsDue_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000100;
        }
        result.canSubstituteRobot_ = canSubstituteRobot_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState) {
          return mergeFrom((proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState other) {
        if (other == proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState.getDefaultInstance()) return this;
        if (other.hasTeam()) {
          setTeam(other.getTeam());
        }
        if (!other.availableRequests_.isEmpty()) {
          if (availableRequests_.isEmpty()) {
            availableRequests_ = other.availableRequests_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureAvailableRequestsIsMutable();
            availableRequests_.addAll(other.availableRequests_);
          }
          onChanged();
        }
        if (!other.activeRequests_.isEmpty()) {
          if (activeRequests_.isEmpty()) {
            activeRequests_ = other.activeRequests_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureActiveRequestsIsMutable();
            activeRequests_.addAll(other.activeRequests_);
          }
          onChanged();
        }
        if (other.hasKeeperId()) {
          setKeeperId(other.getKeeperId());
        }
        if (other.hasEmergencyStopIn()) {
          setEmergencyStopIn(other.getEmergencyStopIn());
        }
        if (other.hasTimeoutsLeft()) {
          setTimeoutsLeft(other.getTimeoutsLeft());
        }
        if (other.hasTimeoutTimeLeft()) {
          setTimeoutTimeLeft(other.getTimeoutTimeLeft());
        }
        if (other.hasChallengeFlagsLeft()) {
          setChallengeFlagsLeft(other.getChallengeFlagsLeft());
        }
        if (other.hasMaxRobots()) {
          setMaxRobots(other.getMaxRobots());
        }
        if (other.hasRobotsOnField()) {
          setRobotsOnField(other.getRobotsOnField());
        }
        if (!other.yellowCardsDue_.isEmpty()) {
          if (yellowCardsDue_.isEmpty()) {
            yellowCardsDue_ = other.yellowCardsDue_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureYellowCardsDueIsMutable();
            yellowCardsDue_.addAll(other.yellowCardsDue_);
          }
          onChanged();
        }
        if (other.hasCanSubstituteRobot()) {
          setCanSubstituteRobot(other.getCanSubstituteRobot());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int team_ = 0;
      /**
       * <pre>
       * the team that is controlled
       * </pre>
       *
       * <code>optional .proto.simulation.Team team = 12;</code>
       */
      public boolean hasTeam() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * the team that is controlled
       * </pre>
       *
       * <code>optional .proto.simulation.Team team = 12;</code>
       */
      public proto.simulation.SslGcCommon.Team getTeam() {
        @SuppressWarnings("deprecation")
        proto.simulation.SslGcCommon.Team result = proto.simulation.SslGcCommon.Team.valueOf(team_);
        return result == null ? proto.simulation.SslGcCommon.Team.UNKNOWN : result;
      }
      /**
       * <pre>
       * the team that is controlled
       * </pre>
       *
       * <code>optional .proto.simulation.Team team = 12;</code>
       */
      public Builder setTeam(proto.simulation.SslGcCommon.Team value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        team_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the team that is controlled
       * </pre>
       *
       * <code>optional .proto.simulation.Team team = 12;</code>
       */
      public Builder clearTeam() {
        bitField0_ = (bitField0_ & ~0x00000001);
        team_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> availableRequests_ =
        java.util.Collections.emptyList();
      private void ensureAvailableRequestsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          availableRequests_ = new java.util.ArrayList<java.lang.Integer>(availableRequests_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <pre>
       * list of all currently available request types that can be made
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
       */
      public java.util.List<proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType> getAvailableRequestsList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType>(availableRequests_, availableRequests_converter_);
      }
      /**
       * <pre>
       * list of all currently available request types that can be made
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
       */
      public int getAvailableRequestsCount() {
        return availableRequests_.size();
      }
      /**
       * <pre>
       * list of all currently available request types that can be made
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
       */
      public proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType getAvailableRequests(int index) {
        return availableRequests_converter_.convert(availableRequests_.get(index));
      }
      /**
       * <pre>
       * list of all currently available request types that can be made
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
       */
      public Builder setAvailableRequests(
          int index, proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAvailableRequestsIsMutable();
        availableRequests_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of all currently available request types that can be made
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
       */
      public Builder addAvailableRequests(proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAvailableRequestsIsMutable();
        availableRequests_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of all currently available request types that can be made
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
       */
      public Builder addAllAvailableRequests(
          java.lang.Iterable<? extends proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType> values) {
        ensureAvailableRequestsIsMutable();
        for (proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType value : values) {
          availableRequests_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of all currently available request types that can be made
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType available_requests = 1;</code>
       */
      public Builder clearAvailableRequests() {
        availableRequests_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> activeRequests_ =
        java.util.Collections.emptyList();
      private void ensureActiveRequestsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          activeRequests_ = new java.util.ArrayList<java.lang.Integer>(activeRequests_);
          bitField0_ |= 0x00000004;
        }
      }
      /**
       * <pre>
       * list of all currently active request types that are pending
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
       */
      public java.util.List<proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType> getActiveRequestsList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType>(activeRequests_, activeRequests_converter_);
      }
      /**
       * <pre>
       * list of all currently active request types that are pending
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
       */
      public int getActiveRequestsCount() {
        return activeRequests_.size();
      }
      /**
       * <pre>
       * list of all currently active request types that are pending
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
       */
      public proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType getActiveRequests(int index) {
        return activeRequests_converter_.convert(activeRequests_.get(index));
      }
      /**
       * <pre>
       * list of all currently active request types that are pending
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
       */
      public Builder setActiveRequests(
          int index, proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureActiveRequestsIsMutable();
        activeRequests_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of all currently active request types that are pending
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
       */
      public Builder addActiveRequests(proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureActiveRequestsIsMutable();
        activeRequests_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of all currently active request types that are pending
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
       */
      public Builder addAllActiveRequests(
          java.lang.Iterable<? extends proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType> values) {
        ensureActiveRequestsIsMutable();
        for (proto.gc.SslGcRconRemotecontrol.RemoteControlRequestType value : values) {
          activeRequests_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of all currently active request types that are pending
       * </pre>
       *
       * <code>repeated .proto.gc.RemoteControlRequestType active_requests = 2;</code>
       */
      public Builder clearActiveRequests() {
        activeRequests_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private int keeperId_ ;
      /**
       * <pre>
       * currently set keeper id
       * </pre>
       *
       * <code>optional int32 keeper_id = 3;</code>
       */
      public boolean hasKeeperId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <pre>
       * currently set keeper id
       * </pre>
       *
       * <code>optional int32 keeper_id = 3;</code>
       */
      public int getKeeperId() {
        return keeperId_;
      }
      /**
       * <pre>
       * currently set keeper id
       * </pre>
       *
       * <code>optional int32 keeper_id = 3;</code>
       */
      public Builder setKeeperId(int value) {
        bitField0_ |= 0x00000008;
        keeperId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * currently set keeper id
       * </pre>
       *
       * <code>optional int32 keeper_id = 3;</code>
       */
      public Builder clearKeeperId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        keeperId_ = 0;
        onChanged();
        return this;
      }

      private float emergencyStopIn_ ;
      /**
       * <pre>
       * number of seconds till emergency stop is executed
       * zero, if no emergency stop requested
       * </pre>
       *
       * <code>optional float emergency_stop_in = 4;</code>
       */
      public boolean hasEmergencyStopIn() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <pre>
       * number of seconds till emergency stop is executed
       * zero, if no emergency stop requested
       * </pre>
       *
       * <code>optional float emergency_stop_in = 4;</code>
       */
      public float getEmergencyStopIn() {
        return emergencyStopIn_;
      }
      /**
       * <pre>
       * number of seconds till emergency stop is executed
       * zero, if no emergency stop requested
       * </pre>
       *
       * <code>optional float emergency_stop_in = 4;</code>
       */
      public Builder setEmergencyStopIn(float value) {
        bitField0_ |= 0x00000010;
        emergencyStopIn_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * number of seconds till emergency stop is executed
       * zero, if no emergency stop requested
       * </pre>
       *
       * <code>optional float emergency_stop_in = 4;</code>
       */
      public Builder clearEmergencyStopIn() {
        bitField0_ = (bitField0_ & ~0x00000010);
        emergencyStopIn_ = 0F;
        onChanged();
        return this;
      }

      private int timeoutsLeft_ ;
      /**
       * <pre>
       * number of timeouts left for the team
       * </pre>
       *
       * <code>optional int32 timeouts_left = 5;</code>
       */
      public boolean hasTimeoutsLeft() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <pre>
       * number of timeouts left for the team
       * </pre>
       *
       * <code>optional int32 timeouts_left = 5;</code>
       */
      public int getTimeoutsLeft() {
        return timeoutsLeft_;
      }
      /**
       * <pre>
       * number of timeouts left for the team
       * </pre>
       *
       * <code>optional int32 timeouts_left = 5;</code>
       */
      public Builder setTimeoutsLeft(int value) {
        bitField0_ |= 0x00000020;
        timeoutsLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * number of timeouts left for the team
       * </pre>
       *
       * <code>optional int32 timeouts_left = 5;</code>
       */
      public Builder clearTimeoutsLeft() {
        bitField0_ = (bitField0_ & ~0x00000020);
        timeoutsLeft_ = 0;
        onChanged();
        return this;
      }

      private float timeoutTimeLeft_ ;
      /**
       * <pre>
       * number of seconds left for timeout for the team
       * </pre>
       *
       * <code>optional float timeout_time_left = 10;</code>
       */
      public boolean hasTimeoutTimeLeft() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <pre>
       * number of seconds left for timeout for the team
       * </pre>
       *
       * <code>optional float timeout_time_left = 10;</code>
       */
      public float getTimeoutTimeLeft() {
        return timeoutTimeLeft_;
      }
      /**
       * <pre>
       * number of seconds left for timeout for the team
       * </pre>
       *
       * <code>optional float timeout_time_left = 10;</code>
       */
      public Builder setTimeoutTimeLeft(float value) {
        bitField0_ |= 0x00000040;
        timeoutTimeLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * number of seconds left for timeout for the team
       * </pre>
       *
       * <code>optional float timeout_time_left = 10;</code>
       */
      public Builder clearTimeoutTimeLeft() {
        bitField0_ = (bitField0_ & ~0x00000040);
        timeoutTimeLeft_ = 0F;
        onChanged();
        return this;
      }

      private int challengeFlagsLeft_ ;
      /**
       * <pre>
       * number of challenge flags left for the team
       * </pre>
       *
       * <code>optional int32 challenge_flags_left = 6;</code>
       */
      public boolean hasChallengeFlagsLeft() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <pre>
       * number of challenge flags left for the team
       * </pre>
       *
       * <code>optional int32 challenge_flags_left = 6;</code>
       */
      public int getChallengeFlagsLeft() {
        return challengeFlagsLeft_;
      }
      /**
       * <pre>
       * number of challenge flags left for the team
       * </pre>
       *
       * <code>optional int32 challenge_flags_left = 6;</code>
       */
      public Builder setChallengeFlagsLeft(int value) {
        bitField0_ |= 0x00000080;
        challengeFlagsLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * number of challenge flags left for the team
       * </pre>
       *
       * <code>optional int32 challenge_flags_left = 6;</code>
       */
      public Builder clearChallengeFlagsLeft() {
        bitField0_ = (bitField0_ & ~0x00000080);
        challengeFlagsLeft_ = 0;
        onChanged();
        return this;
      }

      private int maxRobots_ ;
      /**
       * <pre>
       * max number of robots currently allowed
       * </pre>
       *
       * <code>optional int32 max_robots = 7;</code>
       */
      public boolean hasMaxRobots() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <pre>
       * max number of robots currently allowed
       * </pre>
       *
       * <code>optional int32 max_robots = 7;</code>
       */
      public int getMaxRobots() {
        return maxRobots_;
      }
      /**
       * <pre>
       * max number of robots currently allowed
       * </pre>
       *
       * <code>optional int32 max_robots = 7;</code>
       */
      public Builder setMaxRobots(int value) {
        bitField0_ |= 0x00000100;
        maxRobots_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * max number of robots currently allowed
       * </pre>
       *
       * <code>optional int32 max_robots = 7;</code>
       */
      public Builder clearMaxRobots() {
        bitField0_ = (bitField0_ & ~0x00000100);
        maxRobots_ = 0;
        onChanged();
        return this;
      }

      private int robotsOnField_ ;
      /**
       * <pre>
       * current number of robots visible on field
       * </pre>
       *
       * <code>optional int32 robots_on_field = 9;</code>
       */
      public boolean hasRobotsOnField() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <pre>
       * current number of robots visible on field
       * </pre>
       *
       * <code>optional int32 robots_on_field = 9;</code>
       */
      public int getRobotsOnField() {
        return robotsOnField_;
      }
      /**
       * <pre>
       * current number of robots visible on field
       * </pre>
       *
       * <code>optional int32 robots_on_field = 9;</code>
       */
      public Builder setRobotsOnField(int value) {
        bitField0_ |= 0x00000200;
        robotsOnField_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * current number of robots visible on field
       * </pre>
       *
       * <code>optional int32 robots_on_field = 9;</code>
       */
      public Builder clearRobotsOnField() {
        bitField0_ = (bitField0_ & ~0x00000200);
        robotsOnField_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> yellowCardsDue_ = java.util.Collections.emptyList();
      private void ensureYellowCardsDueIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          yellowCardsDue_ = new java.util.ArrayList<java.lang.Float>(yellowCardsDue_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <pre>
       * list of due times for each active yellow card (in seconds)
       * </pre>
       *
       * <code>repeated float yellow_cards_due = 8;</code>
       */
      public java.util.List<java.lang.Float>
          getYellowCardsDueList() {
        return java.util.Collections.unmodifiableList(yellowCardsDue_);
      }
      /**
       * <pre>
       * list of due times for each active yellow card (in seconds)
       * </pre>
       *
       * <code>repeated float yellow_cards_due = 8;</code>
       */
      public int getYellowCardsDueCount() {
        return yellowCardsDue_.size();
      }
      /**
       * <pre>
       * list of due times for each active yellow card (in seconds)
       * </pre>
       *
       * <code>repeated float yellow_cards_due = 8;</code>
       */
      public float getYellowCardsDue(int index) {
        return yellowCardsDue_.get(index);
      }
      /**
       * <pre>
       * list of due times for each active yellow card (in seconds)
       * </pre>
       *
       * <code>repeated float yellow_cards_due = 8;</code>
       */
      public Builder setYellowCardsDue(
          int index, float value) {
        ensureYellowCardsDueIsMutable();
        yellowCardsDue_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of due times for each active yellow card (in seconds)
       * </pre>
       *
       * <code>repeated float yellow_cards_due = 8;</code>
       */
      public Builder addYellowCardsDue(float value) {
        ensureYellowCardsDueIsMutable();
        yellowCardsDue_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of due times for each active yellow card (in seconds)
       * </pre>
       *
       * <code>repeated float yellow_cards_due = 8;</code>
       */
      public Builder addAllYellowCardsDue(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureYellowCardsDueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, yellowCardsDue_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * list of due times for each active yellow card (in seconds)
       * </pre>
       *
       * <code>repeated float yellow_cards_due = 8;</code>
       */
      public Builder clearYellowCardsDue() {
        yellowCardsDue_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      private boolean canSubstituteRobot_ ;
      /**
       * <pre>
       * if true, team is allowed to substitute robots
       * </pre>
       *
       * <code>optional bool can_substitute_robot = 11;</code>
       */
      public boolean hasCanSubstituteRobot() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <pre>
       * if true, team is allowed to substitute robots
       * </pre>
       *
       * <code>optional bool can_substitute_robot = 11;</code>
       */
      public boolean getCanSubstituteRobot() {
        return canSubstituteRobot_;
      }
      /**
       * <pre>
       * if true, team is allowed to substitute robots
       * </pre>
       *
       * <code>optional bool can_substitute_robot = 11;</code>
       */
      public Builder setCanSubstituteRobot(boolean value) {
        bitField0_ |= 0x00000800;
        canSubstituteRobot_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * if true, team is allowed to substitute robots
       * </pre>
       *
       * <code>optional bool can_substitute_robot = 11;</code>
       */
      public Builder clearCanSubstituteRobot() {
        bitField0_ = (bitField0_ & ~0x00000800);
        canSubstituteRobot_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:proto.gc.RemoteControlTeamState)
    }

    // @@protoc_insertion_point(class_scope:proto.gc.RemoteControlTeamState)
    private static final proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState();
    }

    public static proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<RemoteControlTeamState>
        PARSER = new com.google.protobuf.AbstractParser<RemoteControlTeamState>() {
      @java.lang.Override
      public RemoteControlTeamState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RemoteControlTeamState(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RemoteControlTeamState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RemoteControlTeamState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public proto.gc.SslGcRconRemotecontrol.RemoteControlTeamState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_gc_RemoteControlRegistration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_proto_gc_RemoteControlRegistration_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_gc_RemoteControlToController_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_proto_gc_RemoteControlToController_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_gc_ControllerToRemoteControl_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_proto_gc_ControllerToRemoteControl_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_gc_RemoteControlTeamState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_proto_gc_RemoteControlTeamState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037ssl_gc_rcon_remotecontrol.proto\022\010proto" +
      ".gc\032\023ssl_gc_common.proto\032\021ssl_gc_rcon.pr" +
      "oto\"i\n\031RemoteControlRegistration\022$\n\004team" +
      "\030\001 \002(\0162\026.proto.simulation.Team\022&\n\tsignat" +
      "ure\030\002 \001(\0132\023.proto.gc.Signature\"\317\002\n\031Remot" +
      "eControlToController\022&\n\tsignature\030\001 \001(\0132" +
      "\023.proto.gc.Signature\022>\n\007request\030\002 \001(\0162+." +
      "proto.gc.RemoteControlToController.Reque" +
      "stH\000\022\030\n\016desired_keeper\030\003 \001(\005H\000\022$\n\032reques" +
      "t_robot_substitution\030\004 \001(\010H\000\022\031\n\017request_" +
      "timeout\030\005 \001(\010H\000\022 \n\026request_emergency_sto" +
      "p\030\006 \001(\010H\000\"F\n\007Request\022\013\n\007UNKNOWN\020\000\022\010\n\004PIN" +
      "G\020\001\022\022\n\016CHALLENGE_FLAG\020\002\022\020\n\014STOP_TIMEOUT\020" +
      "\003B\005\n\003msg\"\201\001\n\031ControllerToRemoteControl\0223" +
      "\n\020controller_reply\030\001 \001(\0132\031.proto.gc.Cont" +
      "rollerReply\022/\n\005state\030\002 \001(\0132 .proto.gc.Re" +
      "moteControlTeamState\"\236\003\n\026RemoteControlTe" +
      "amState\022$\n\004team\030\014 \001(\0162\026.proto.simulation" +
      ".Team\022>\n\022available_requests\030\001 \003(\0162\".prot" +
      "o.gc.RemoteControlRequestType\022;\n\017active_" +
      "requests\030\002 \003(\0162\".proto.gc.RemoteControlR" +
      "equestType\022\021\n\tkeeper_id\030\003 \001(\005\022\031\n\021emergen" +
      "cy_stop_in\030\004 \001(\002\022\025\n\rtimeouts_left\030\005 \001(\005\022" +
      "\031\n\021timeout_time_left\030\n \001(\002\022\034\n\024challenge_" +
      "flags_left\030\006 \001(\005\022\022\n\nmax_robots\030\007 \001(\005\022\027\n\017" +
      "robots_on_field\030\t \001(\005\022\030\n\020yellow_cards_du" +
      "e\030\010 \003(\002\022\034\n\024can_substitute_robot\030\013 \001(\010*\251\001" +
      "\n\030RemoteControlRequestType\022\030\n\024UNKNOWN_RE" +
      "QUEST_TYPE\020\000\022\022\n\016EMERGENCY_STOP\020\001\022\026\n\022ROBO" +
      "T_SUBSTITUTION\020\002\022\013\n\007TIMEOUT\020\003\022\022\n\016CHALLEN" +
      "GE_FLAG\020\004\022\024\n\020CHANGE_KEEPER_ID\020\005\022\020\n\014STOP_" +
      "TIMEOUT\020\006B>Z<github.com/RoboCup-SSL/ssl-" +
      "game-controller/internal/app/rcon"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          proto.simulation.SslGcCommon.getDescriptor(),
          proto.gc.SslGcRcon.getDescriptor(),
        }, assigner);
    internal_static_proto_gc_RemoteControlRegistration_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_gc_RemoteControlRegistration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_proto_gc_RemoteControlRegistration_descriptor,
        new java.lang.String[] { "Team", "Signature", });
    internal_static_proto_gc_RemoteControlToController_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_proto_gc_RemoteControlToController_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_proto_gc_RemoteControlToController_descriptor,
        new java.lang.String[] { "Signature", "Request", "DesiredKeeper", "RequestRobotSubstitution", "RequestTimeout", "RequestEmergencyStop", "Msg", });
    internal_static_proto_gc_ControllerToRemoteControl_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_proto_gc_ControllerToRemoteControl_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_proto_gc_ControllerToRemoteControl_descriptor,
        new java.lang.String[] { "ControllerReply", "State", });
    internal_static_proto_gc_RemoteControlTeamState_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_proto_gc_RemoteControlTeamState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_proto_gc_RemoteControlTeamState_descriptor,
        new java.lang.String[] { "Team", "AvailableRequests", "ActiveRequests", "KeeperId", "EmergencyStopIn", "TimeoutsLeft", "TimeoutTimeLeft", "ChallengeFlagsLeft", "MaxRobots", "RobotsOnField", "YellowCardsDue", "CanSubstituteRobot", });
    proto.simulation.SslGcCommon.getDescriptor();
    proto.gc.SslGcRcon.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
